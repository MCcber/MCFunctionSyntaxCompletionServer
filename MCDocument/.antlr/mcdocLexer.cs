//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/C#Project/MinecraftLanguageServer/MCDocument/mcdocLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class mcdocLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, StringKeyType=2, BooleanKeyType=3, ByteKeyType=4, ShortKeyType=5, 
		IntKeyType=6, FloatKeyType=7, DoubleKeyType=8, LongKeyType=9, At=10, FieldValue=11, 
		Commentary=12, RegexPattern=13, DoubleQuotes=14, String=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "StringKeyType", "BooleanKeyType", "ByteKeyType", "ShortKeyType", 
		"IntKeyType", "FloatKeyType", "DoubleKeyType", "LongKeyType", "At", "FieldValue", 
		"Commentary", "RegexPattern", "DoubleQuotes", "String", "EscapeSequence", 
		"UnicodeEscape", "HexDigit"
	};


	public mcdocLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public mcdocLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'string'", "'boolean'", "'byte'", "'short'", "'int'", "'float'", 
		"'double'", "'long'", "'@ '", null, null, null, "'\" '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "StringKeyType", "BooleanKeyType", "ByteKeyType", "ShortKeyType", 
		"IntKeyType", "FloatKeyType", "DoubleKeyType", "LongKeyType", "At", "FieldValue", 
		"Commentary", "RegexPattern", "DoubleQuotes", "String"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "mcdocLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static mcdocLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,4,0,39,8,0,11,0,12,0,40,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,4,
		10,97,8,10,11,10,12,10,98,1,11,1,11,1,11,1,11,5,11,105,8,11,10,11,12,11,
		108,9,11,1,11,3,11,111,8,11,1,11,3,11,114,8,11,1,12,4,12,117,8,12,11,12,
		12,12,118,1,13,1,13,1,13,1,14,1,14,1,14,4,14,127,8,14,11,14,12,14,128,
		1,14,1,14,1,15,1,15,1,15,1,15,4,15,137,8,15,11,15,12,15,138,1,15,1,15,
		1,15,1,15,3,15,145,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,4,
		15,170,8,15,11,15,12,15,171,1,15,1,15,3,15,176,8,15,1,16,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,0,33,0,35,0,1,0,8,3,0,9,10,13,13,32,
		32,3,0,65,90,95,95,97,122,2,0,10,10,13,13,1,0,46,46,4,0,10,10,13,13,34,
		34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,
		0,48,55,3,0,48,57,65,70,97,102,197,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,1,38,1,0,0,0,3,44,1,0,0,0,5,51,1,0,0,0,7,59,1,0,0,0,9,64,
		1,0,0,0,11,70,1,0,0,0,13,74,1,0,0,0,15,80,1,0,0,0,17,87,1,0,0,0,19,92,
		1,0,0,0,21,96,1,0,0,0,23,100,1,0,0,0,25,116,1,0,0,0,27,120,1,0,0,0,29,
		123,1,0,0,0,31,175,1,0,0,0,33,177,1,0,0,0,35,183,1,0,0,0,37,39,7,0,0,0,
		38,37,1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,42,1,0,0,0,
		42,43,6,0,0,0,43,2,1,0,0,0,44,45,5,115,0,0,45,46,5,116,0,0,46,47,5,114,
		0,0,47,48,5,105,0,0,48,49,5,110,0,0,49,50,5,103,0,0,50,4,1,0,0,0,51,52,
		5,98,0,0,52,53,5,111,0,0,53,54,5,111,0,0,54,55,5,108,0,0,55,56,5,101,0,
		0,56,57,5,97,0,0,57,58,5,110,0,0,58,6,1,0,0,0,59,60,5,98,0,0,60,61,5,121,
		0,0,61,62,5,116,0,0,62,63,5,101,0,0,63,8,1,0,0,0,64,65,5,115,0,0,65,66,
		5,104,0,0,66,67,5,111,0,0,67,68,5,114,0,0,68,69,5,116,0,0,69,10,1,0,0,
		0,70,71,5,105,0,0,71,72,5,110,0,0,72,73,5,116,0,0,73,12,1,0,0,0,74,75,
		5,102,0,0,75,76,5,108,0,0,76,77,5,111,0,0,77,78,5,97,0,0,78,79,5,116,0,
		0,79,14,1,0,0,0,80,81,5,100,0,0,81,82,5,111,0,0,82,83,5,117,0,0,83,84,
		5,98,0,0,84,85,5,108,0,0,85,86,5,101,0,0,86,16,1,0,0,0,87,88,5,108,0,0,
		88,89,5,111,0,0,89,90,5,110,0,0,90,91,5,103,0,0,91,18,1,0,0,0,92,93,5,
		64,0,0,93,94,5,32,0,0,94,20,1,0,0,0,95,97,7,1,0,0,96,95,1,0,0,0,97,98,
		1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,22,1,0,0,0,100,101,5,47,0,0,101,
		102,5,47,0,0,102,106,1,0,0,0,103,105,8,2,0,0,104,103,1,0,0,0,105,108,1,
		0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,113,1,0,0,0,108,106,1,0,0,0,
		109,111,5,13,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,114,
		5,10,0,0,113,110,1,0,0,0,113,114,1,0,0,0,114,24,1,0,0,0,115,117,7,3,0,
		0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,
		26,1,0,0,0,120,121,5,34,0,0,121,122,5,32,0,0,122,28,1,0,0,0,123,126,3,
		27,13,0,124,127,3,31,15,0,125,127,8,4,0,0,126,124,1,0,0,0,126,125,1,0,
		0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,
		131,3,27,13,0,131,30,1,0,0,0,132,133,5,92,0,0,133,176,7,5,0,0,134,136,
		5,92,0,0,135,137,7,6,0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,
		0,138,139,1,0,0,0,139,176,1,0,0,0,140,141,5,92,0,0,141,142,5,120,0,0,142,
		144,3,35,17,0,143,145,3,35,17,0,144,143,1,0,0,0,144,145,1,0,0,0,145,176,
		1,0,0,0,146,147,5,92,0,0,147,148,5,117,0,0,148,149,3,35,17,0,149,150,3,
		35,17,0,150,151,3,35,17,0,151,152,3,35,17,0,152,176,1,0,0,0,153,154,5,
		92,0,0,154,155,5,85,0,0,155,156,3,35,17,0,156,157,3,35,17,0,157,158,3,
		35,17,0,158,159,3,35,17,0,159,160,3,35,17,0,160,161,3,35,17,0,161,162,
		3,35,17,0,162,163,3,35,17,0,163,176,1,0,0,0,164,165,5,92,0,0,165,166,5,
		117,0,0,166,167,5,123,0,0,167,169,1,0,0,0,168,170,3,35,17,0,169,168,1,
		0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,
		173,174,5,125,0,0,174,176,1,0,0,0,175,132,1,0,0,0,175,134,1,0,0,0,175,
		140,1,0,0,0,175,146,1,0,0,0,175,153,1,0,0,0,175,164,1,0,0,0,176,32,1,0,
		0,0,177,178,5,117,0,0,178,179,3,35,17,0,179,180,3,35,17,0,180,181,3,35,
		17,0,181,182,3,35,17,0,182,34,1,0,0,0,183,184,7,7,0,0,184,36,1,0,0,0,13,
		0,40,98,106,110,113,118,126,128,138,144,171,175,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
