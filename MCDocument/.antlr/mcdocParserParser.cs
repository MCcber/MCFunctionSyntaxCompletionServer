//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/C#Project/MinecraftLanguageServer/MCDocument/mcdocParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class mcdocParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, WS=69, StringKeyType=70, BooleanKeyType=71, ByteKeyType=72, 
		ShortKeyType=73, IntKeyType=74, FloatKeyType=75, DoubleKeyType=76, LongKeyType=77, 
		FieldValue=78, Summary=79, RegexPattern=80, String=81, DoubleColon=82, 
		DocFilePath=83, Integer=84, FloatExponent=85, Float=86, VersionString=87, 
		DispatcherKeyString=88, DispatcherValue=89, Number=90, PositiveInteger=91, 
		Comma=92, ResourceLocationChar=93, ResourceLocation=94, IdentContinue=95, 
		IdentStart=96, Identifier=97, ColonMark=98, TypedNumber=99, PathSegment=100, 
		Path=101, AccessorKey=102, Accessor=103, DynamicIndex=104, StaticIndexKey=105, 
		NewLine=106;
	public const int
		RULE_baseDataType = 0, RULE_integer = 1, RULE_float = 2, RULE_identifier = 3, 
		RULE_questionMark = 4, RULE_summary = 5, RULE_fieldValue = 6, RULE_integerRange = 7, 
		RULE_floatRange = 8, RULE_keywordType = 9, RULE_booleanType = 10, RULE_booleanKeyType = 11, 
		RULE_stringType = 12, RULE_literalType = 13, RULE_numericType = 14, RULE_listType = 15, 
		RULE_tupleType = 16, RULE_prelim = 17, RULE_enumType = 18, RULE_enumValue = 19, 
		RULE_enumField = 20, RULE_enumBlock = 21, RULE_enum = 22, RULE_referenceType = 23, 
		RULE_dispatcherType = 24, RULE_unionType = 25, RULE_index = 26, RULE_indexBody = 27, 
		RULE_indexOnAType = 28, RULE_typeArgBlock = 29, RULE_unAttributedType = 30, 
		RULE_type = 31, RULE_unknownKey = 32, RULE_unknownValue = 33, RULE_unknownResource = 34, 
		RULE_arrayLength = 35, RULE_primitiveArrayType = 36, RULE_dataType = 37, 
		RULE_canonical = 38, RULE_color = 39, RULE_commandSlashOptions = 40, RULE_commandMacroOptions = 41, 
		RULE_commandEmptyOptions = 42, RULE_commandMaxLength = 43, RULE_commandParameters = 44, 
		RULE_command = 45, RULE_deprecated = 46, RULE_dispatcher_key = 47, RULE_divisible_by = 48, 
		RULE_entityAmount = 49, RULE_entityType = 50, RULE_entityParameters = 51, 
		RULE_entity = 52, RULE_gameRuleParameter = 53, RULE_gameRule = 54, RULE_idRegistry = 55, 
		RULE_idTags = 56, RULE_idParameters = 57, RULE_id = 58, RULE_match_regex = 59, 
		RULE_nbt = 60, RULE_nbt_path = 61, RULE_objective = 62, RULE_regex_pattern = 63, 
		RULE_score_holder = 64, RULE_since = 65, RULE_until = 66, RULE_tag = 67, 
		RULE_team = 68, RULE_text_component = 69, RULE_uuid = 70, RULE_superPrefix = 71, 
		RULE_usefilePath = 72, RULE_useSentence = 73, RULE_documentAttributes = 74, 
		RULE_fields = 75, RULE_structReference = 76, RULE_superInvoke = 77, RULE_structContent = 78, 
		RULE_structName = 79, RULE_structSentence = 80, RULE_document = 81;
	public static readonly string[] ruleNames = {
		"baseDataType", "integer", "float", "identifier", "questionMark", "summary", 
		"fieldValue", "integerRange", "floatRange", "keywordType", "booleanType", 
		"booleanKeyType", "stringType", "literalType", "numericType", "listType", 
		"tupleType", "prelim", "enumType", "enumValue", "enumField", "enumBlock", 
		"enum", "referenceType", "dispatcherType", "unionType", "index", "indexBody", 
		"indexOnAType", "typeArgBlock", "unAttributedType", "type", "unknownKey", 
		"unknownValue", "unknownResource", "arrayLength", "primitiveArrayType", 
		"dataType", "canonical", "color", "commandSlashOptions", "commandMacroOptions", 
		"commandEmptyOptions", "commandMaxLength", "commandParameters", "command", 
		"deprecated", "dispatcher_key", "divisible_by", "entityAmount", "entityType", 
		"entityParameters", "entity", "gameRuleParameter", "gameRule", "idRegistry", 
		"idTags", "idParameters", "id", "match_regex", "nbt", "nbt_path", "objective", 
		"regex_pattern", "score_holder", "since", "until", "tag", "team", "text_component", 
		"uuid", "superPrefix", "usefilePath", "useSentence", "documentAttributes", 
		"fields", "structReference", "superInvoke", "structContent", "structName", 
		"structSentence", "document"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "'..'", "'any'", "'true'", "'false'", "'@'", "'['", "']'", 
		"',]'", "'='", "'{'", "'}'", "'enum'", "'('", "')'", "'|'", "'<'", "'>'", 
		"'<,'", "'#['", "'@ '", "'[]'", "'#[canonical]'", "'#[color='", "'slash='", 
		"'macro='", "'empty='", "'max_length='", "'#[command('", "'#[deprecated='", 
		"'#[dispatcher_key='", "'#[divisible_by='", "'amount='", "'multiple'", 
		"'single'", "'type='", "'entities'", "'players'", "'#[entity('", "'\"boolean\"'", 
		"'\"int\"'", "'#[game_rule('", "')]'", "'registry='", "'tags='", "'allowed'", 
		"'implicit'", "'required'", "'#[id('", "')] string'", "'#[match_regex=\"'", 
		"'\"]'", "'#[nbt=ItemStack]'", "'#[nbt_path]'", "'#[objective]'", "'#[regex_pattern]'", 
		"'#[score_holder]'", "'#[since=\"'", "'#[until=\"'", "'#[tag]'", "'#[team]'", 
		"'#[text_component]'", "'#[uuid]'", "'super'", "'use'", "'...'", "'...super::'", 
		"'struct'", null, "'string'", "'boolean'", "'byte'", "'short'", "'int'", 
		"'float'", "'double'", "'long'", null, null, null, null, "'::'", null, 
		null, null, null, null, null, null, null, null, "','", null, null, null, 
		null, null, "':'", null, null, null, null, null, null, null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "WS", "StringKeyType", 
		"BooleanKeyType", "ByteKeyType", "ShortKeyType", "IntKeyType", "FloatKeyType", 
		"DoubleKeyType", "LongKeyType", "FieldValue", "Summary", "RegexPattern", 
		"String", "DoubleColon", "DocFilePath", "Integer", "FloatExponent", "Float", 
		"VersionString", "DispatcherKeyString", "DispatcherValue", "Number", "PositiveInteger", 
		"Comma", "ResourceLocationChar", "ResourceLocation", "IdentContinue", 
		"IdentStart", "Identifier", "ColonMark", "TypedNumber", "PathSegment", 
		"Path", "AccessorKey", "Accessor", "DynamicIndex", "StaticIndexKey", "NewLine"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "mcdocParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static mcdocParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public mcdocParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public mcdocParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BaseDataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanKeyType() { return GetToken(mcdocParserParser.BooleanKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParserParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortKeyType() { return GetToken(mcdocParserParser.ShortKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParserParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatKeyType() { return GetToken(mcdocParserParser.FloatKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleKeyType() { return GetToken(mcdocParserParser.DoubleKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParserParser.LongKeyType, 0); }
		public BaseDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseDataType; } }
	}

	[RuleVersion(0)]
	public BaseDataTypeContext baseDataType() {
		BaseDataTypeContext _localctx = new BaseDataTypeContext(Context, State);
		EnterRule(_localctx, 0, RULE_baseDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(mcdocParserParser.Integer, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 2, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(mcdocParserParser.Float, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 4, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParserParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionMarkContext : ParserRuleContext {
		public QuestionMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionMark; } }
	}

	[RuleVersion(0)]
	public QuestionMarkContext questionMark() {
		QuestionMarkContext _localctx = new QuestionMarkContext(Context, State);
		EnterRule(_localctx, 8, RULE_questionMark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Summary() { return GetToken(mcdocParserParser.Summary, 0); }
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 10, RULE_summary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(Summary);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParserParser.FieldValue, 0); }
		public FieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldValue; } }
	}

	[RuleVersion(0)]
	public FieldValueContext fieldValue() {
		FieldValueContext _localctx = new FieldValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_fieldValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public IntegerRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerRange; } }
	}

	[RuleVersion(0)]
	public IntegerRangeContext integerRange() {
		IntegerRangeContext _localctx = new IntegerRangeContext(Context, State);
		EnterRule(_localctx, 14, RULE_integerRange);
		int _la;
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 178;
					Match(T__1);
					}
				}

				State = 181;
				integer();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 182;
				integer();
				State = 183;
				Match(T__1);
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Integer) {
					{
					State = 184;
					integer();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext[] @float() {
			return GetRuleContexts<FloatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float(int i) {
			return GetRuleContext<FloatContext>(i);
		}
		public FloatRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatRange; } }
	}

	[RuleVersion(0)]
	public FloatRangeContext floatRange() {
		FloatRangeContext _localctx = new FloatRangeContext(Context, State);
		EnterRule(_localctx, 16, RULE_floatRange);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 189;
					Match(T__1);
					}
				}

				State = 192;
				@float();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 193;
				@float();
				State = 194;
				Match(T__1);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Float) {
					{
					State = 195;
					@float();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanTypeContext booleanType() {
			return GetRuleContext<BooleanTypeContext>(0);
		}
		public KeywordTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordType; } }
	}

	[RuleVersion(0)]
	public KeywordTypeContext keywordType() {
		KeywordTypeContext _localctx = new KeywordTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_keywordType);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(T__2);
				}
				break;
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				booleanType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanTypeContext : ParserRuleContext {
		public BooleanTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanType; } }
	}

	[RuleVersion(0)]
	public BooleanTypeContext booleanType() {
		BooleanTypeContext _localctx = new BooleanTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_booleanType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanKeyType() { return GetToken(mcdocParserParser.BooleanKeyType, 0); }
		public BooleanKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanKeyType; } }
	}

	[RuleVersion(0)]
	public BooleanKeyTypeContext booleanKeyType() {
		BooleanKeyTypeContext _localctx = new BooleanKeyTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_booleanKeyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(BooleanKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange() {
			return GetRuleContext<IntegerRangeContext>(0);
		}
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(StringKeyType);
			State = 209;
			integerRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypedNumber() { return GetToken(mcdocParserParser.TypedNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_literalType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4 || _la==String || _la==TypedNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParserParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange() {
			return GetRuleContext<IntegerRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortKeyType() { return GetToken(mcdocParserParser.ShortKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParserParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParserParser.LongKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatKeyType() { return GetToken(mcdocParserParser.FloatKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleKeyType() { return GetToken(mcdocParserParser.DoubleKeyType, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_numericType);
		int _la;
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ByteKeyType:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 213;
				Match(ByteKeyType);
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 214;
					Match(T__5);
					State = 215;
					integerRange();
					}
				}

				}
				}
				break;
			case ShortKeyType:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 218;
				Match(ShortKeyType);
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 219;
					Match(T__5);
					State = 220;
					integerRange();
					}
				}

				}
				}
				break;
			case IntKeyType:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 223;
				Match(IntKeyType);
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 224;
					Match(T__5);
					State = 225;
					integerRange();
					}
				}

				}
				}
				break;
			case LongKeyType:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 228;
				Match(LongKeyType);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 229;
					Match(T__5);
					State = 230;
					integerRange();
					}
				}

				}
				}
				break;
			case FloatKeyType:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 233;
				Match(FloatKeyType);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 234;
					Match(T__5);
					State = 235;
					integerRange();
					}
				}

				}
				}
				break;
			case DoubleKeyType:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 238;
				Match(DoubleKeyType);
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 239;
					Match(T__5);
					State = 240;
					integerRange();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange() {
			return GetRuleContext<IntegerRangeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_listType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__6);
			State = 246;
			type();
			State = 247;
			Match(T__7);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 248;
				Match(T__5);
				State = 249;
				integerRange();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParserParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParserParser.Comma, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_tupleType);
		int _la;
		try {
			int _alt;
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 252;
				Match(T__6);
				State = 253;
				type();
				State = 254;
				Match(T__8);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 256;
				Match(T__6);
				State = 257;
				type();
				State = 260;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 258;
						Match(Comma);
						State = 259;
						type();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 262;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 264;
					Match(Comma);
					}
				}

				State = 267;
				Match(T__7);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrelimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		public PrelimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prelim; } }
	}

	[RuleVersion(0)]
	public PrelimContext prelim() {
		PrelimContext _localctx = new PrelimContext(Context, State);
		EnterRule(_localctx, 34, RULE_prelim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			summary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParserParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortKeyType() { return GetToken(mcdocParserParser.ShortKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParserParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParserParser.LongKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatKeyType() { return GetToken(mcdocParserParser.FloatKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleKeyType() { return GetToken(mcdocParserParser.DoubleKeyType, 0); }
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_enumType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 253L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypedNumber() { return GetToken(mcdocParserParser.TypedNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !(_la==String || _la==TypedNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim() {
			return GetRuleContext<PrelimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 40, RULE_enumField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			prelim();
			State = 278;
			identifier();
			State = 279;
			Match(T__9);
			State = 280;
			enumValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParserParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParserParser.Comma, i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumBlock);
		int _la;
		try {
			int _alt;
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				Match(T__10);
				State = 283;
				Match(T__11);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				Match(T__10);
				State = 285;
				enumField();
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 286;
						Match(Comma);
						State = 287;
						enumField();
						}
						} 
					}
					State = 292;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 293;
					Match(Comma);
					}
				}

				State = 296;
				Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim() {
			return GetRuleContext<PrelimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 44, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			prelim();
			State = 301;
			Match(T__12);
			State = 302;
			Match(T__13);
			State = 303;
			enumType();
			State = 304;
			Match(T__14);
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 305;
				identifier();
				}
			}

			State = 308;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(mcdocParserParser.Path, 0); }
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_referenceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(Path);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatcherTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ResourceLocation() { return GetToken(mcdocParserParser.ResourceLocation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyContext indexBody() {
			return GetRuleContext<IndexBodyContext>(0);
		}
		public DispatcherTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatcherType; } }
	}

	[RuleVersion(0)]
	public DispatcherTypeContext dispatcherType() {
		DispatcherTypeContext _localctx = new DispatcherTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_dispatcherType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(ResourceLocation);
			State = 313;
			indexBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public UnionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionType; } }
	}

	[RuleVersion(0)]
	public UnionTypeContext unionType() {
		UnionTypeContext _localctx = new UnionTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_unionType);
		try {
			int _alt;
			State = 328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 315;
				Match(T__13);
				State = 316;
				Match(T__14);
				}
				}
				break;
			case T__29:
			case T__30:
			case T__31:
			case T__38:
			case T__41:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 317;
				type();
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 318;
						Match(T__15);
						State = 319;
						type();
						}
						} 
					}
					State = 324;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 325;
					Match(T__15);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticIndexKey() { return GetToken(mcdocParserParser.StaticIndexKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DynamicIndex() { return GetToken(mcdocParserParser.DynamicIndex, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 52, RULE_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !(_la==DynamicIndex || _la==StaticIndexKey) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParserParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParserParser.Comma, i);
		}
		public IndexBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexBody; } }
	}

	[RuleVersion(0)]
	public IndexBodyContext indexBody() {
		IndexBodyContext _localctx = new IndexBodyContext(Context, State);
		EnterRule(_localctx, 54, RULE_indexBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(T__6);
			State = 333;
			index();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DynamicIndex || _la==StaticIndexKey) {
				{
				{
				State = 334;
				index();
				State = 335;
				Match(Comma);
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 342;
				Match(Comma);
				}
			}

			State = 345;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOnATypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyContext indexBody() {
			return GetRuleContext<IndexBodyContext>(0);
		}
		public IndexOnATypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOnAType; } }
	}

	[RuleVersion(0)]
	public IndexOnATypeContext indexOnAType() {
		IndexOnATypeContext _localctx = new IndexOnATypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_indexOnAType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			indexBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParserParser.Comma, 0); }
		public TypeArgBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgBlock; } }
	}

	[RuleVersion(0)]
	public TypeArgBlockContext typeArgBlock() {
		TypeArgBlockContext _localctx = new TypeArgBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeArgBlock);
		int _la;
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				Match(T__16);
				State = 350;
				Match(T__17);
				}
				break;
			case T__29:
			case T__30:
			case T__31:
			case T__38:
			case T__41:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				type();
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9002243936223232L) != 0)) {
					{
					{
					State = 352;
					type();
					State = 353;
					Match(T__18);
					}
					}
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 360;
					Match(Comma);
					}
				}

				State = 363;
				Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnAttributedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordTypeContext keywordType() {
			return GetRuleContext<KeywordTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTypeContext literalType() {
			return GetRuleContext<LiteralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveArrayTypeContext primitiveArrayType() {
			return GetRuleContext<PrimitiveArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructSentenceContext structSentence() {
			return GetRuleContext<StructSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DispatcherTypeContext dispatcherType() {
			return GetRuleContext<DispatcherTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionTypeContext unionType() {
			return GetRuleContext<UnionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOnATypeContext indexOnAType() {
			return GetRuleContext<IndexOnATypeContext>(0);
		}
		public UnAttributedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unAttributedType; } }
	}

	[RuleVersion(0)]
	public UnAttributedTypeContext unAttributedType() {
		UnAttributedTypeContext _localctx = new UnAttributedTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_unAttributedType);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				keywordType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				stringType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 369;
				literalType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 370;
				numericType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 371;
				primitiveArrayType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 372;
				listType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 373;
				tupleType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 374;
				@enum();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 375;
				structSentence();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 376;
				referenceType();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 377;
				dispatcherType();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 378;
				unionType();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 379;
				indexOnAType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DocumentAttributesContext documentAttributes() {
			return GetRuleContext<DocumentAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnAttributedTypeContext unAttributedType() {
			return GetRuleContext<UnAttributedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyContext[] indexBody() {
			return GetRuleContexts<IndexBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyContext indexBody(int i) {
			return GetRuleContext<IndexBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgBlockContext[] typeArgBlock() {
			return GetRuleContexts<TypeArgBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgBlockContext typeArgBlock(int i) {
			return GetRuleContext<TypeArgBlockContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			documentAttributes();
			State = 383;
			unAttributedType();
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 386;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__6:
						{
						State = 384;
						indexBody();
						}
						break;
					case T__16:
					case T__29:
					case T__30:
					case T__31:
					case T__38:
					case T__41:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case T__57:
					case T__58:
					case T__59:
					case T__60:
					case T__61:
					case T__62:
						{
						State = 385;
						typeArgBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParserParser.FieldValue, 0); }
		public UnknownKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownKey; } }
	}

	[RuleVersion(0)]
	public UnknownKeyContext unknownKey() {
		UnknownKeyContext _localctx = new UnknownKeyContext(Context, State);
		EnterRule(_localctx, 64, RULE_unknownKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParserParser.FieldValue, 0); }
		public UnknownValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownValue; } }
	}

	[RuleVersion(0)]
	public UnknownValueContext unknownValue() {
		UnknownValueContext _localctx = new UnknownValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_unknownValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnknownKeyContext unknownKey() {
			return GetRuleContext<UnknownKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnknownValueContext unknownValue() {
			return GetRuleContext<UnknownValueContext>(0);
		}
		public UnknownResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownResource; } }
	}

	[RuleVersion(0)]
	public UnknownResourceContext unknownResource() {
		UnknownResourceContext _localctx = new UnknownResourceContext(Context, State);
		EnterRule(_localctx, 68, RULE_unknownResource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(T__19);
			State = 396;
			unknownKey();
			State = 397;
			Match(T__9);
			State = 398;
			unknownValue();
			State = 399;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveInteger() { return GetToken(mcdocParserParser.PositiveInteger, 0); }
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 70, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(T__20);
			State = 402;
			Match(PositiveInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParserParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParserParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParserParser.LongKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange() {
			return GetRuleContext<IntegerRangeContext>(0);
		}
		public PrimitiveArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveArrayType; } }
	}

	[RuleVersion(0)]
	public PrimitiveArrayTypeContext primitiveArrayType() {
		PrimitiveArrayTypeContext _localctx = new PrimitiveArrayTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_primitiveArrayType);
		int _la;
		try {
			State = 418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ByteKeyType:
			case IntKeyType:
			case LongKeyType:
				EnterOuterAlt(_localctx, 1);
				{
				{
				{
				State = 404;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 37L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 405;
					Match(T__5);
					State = 406;
					integerRange();
					}
				}

				State = 409;
				Match(T__21);
				}
				}
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 410;
				Match(T__6);
				State = 411;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 37L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 412;
				Match(T__7);
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 414;
					Match(T__5);
					State = 415;
					integerRange();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveArrayTypeContext primitiveArrayType() {
			return GetRuleContext<PrimitiveArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanKeyTypeContext booleanKeyType() {
			return GetRuleContext<BooleanKeyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnknownResourceContext unknownResource() {
			return GetRuleContext<UnknownResourceContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_dataType);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				primitiveArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				booleanKeyType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 422;
				numericType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 423;
				unknownResource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanonicalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		public CanonicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canonical; } }
	}

	[RuleVersion(0)]
	public CanonicalContext canonical() {
		CanonicalContext _localctx = new CanonicalContext(Context, State);
		EnterRule(_localctx, 76, RULE_canonical);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(T__22);
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 427;
				dataType();
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__6 || _la==T__19 || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 127L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 78, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(T__23);
			State = 433;
			Match(String);
			State = 434;
			Match(T__7);
			State = 435;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandSlashOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		public CommandSlashOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandSlashOptions; } }
	}

	[RuleVersion(0)]
	public CommandSlashOptionsContext commandSlashOptions() {
		CommandSlashOptionsContext _localctx = new CommandSlashOptionsContext(Context, State);
		EnterRule(_localctx, 80, RULE_commandSlashOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(T__24);
			State = 438;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandMacroOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		public CommandMacroOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandMacroOptions; } }
	}

	[RuleVersion(0)]
	public CommandMacroOptionsContext commandMacroOptions() {
		CommandMacroOptionsContext _localctx = new CommandMacroOptionsContext(Context, State);
		EnterRule(_localctx, 82, RULE_commandMacroOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(T__25);
			State = 441;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandEmptyOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		public CommandEmptyOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandEmptyOptions; } }
	}

	[RuleVersion(0)]
	public CommandEmptyOptionsContext commandEmptyOptions() {
		CommandEmptyOptionsContext _localctx = new CommandEmptyOptionsContext(Context, State);
		EnterRule(_localctx, 84, RULE_commandEmptyOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(T__26);
			State = 444;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandMaxLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public CommandMaxLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandMaxLength; } }
	}

	[RuleVersion(0)]
	public CommandMaxLengthContext commandMaxLength() {
		CommandMaxLengthContext _localctx = new CommandMaxLengthContext(Context, State);
		EnterRule(_localctx, 86, RULE_commandMaxLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(T__27);
			State = 447;
			integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandSlashOptionsContext commandSlashOptions() {
			return GetRuleContext<CommandSlashOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandMacroOptionsContext commandMacroOptions() {
			return GetRuleContext<CommandMacroOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandEmptyOptionsContext commandEmptyOptions() {
			return GetRuleContext<CommandEmptyOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandMaxLengthContext commandMaxLength() {
			return GetRuleContext<CommandMaxLengthContext>(0);
		}
		public CommandParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandParameters; } }
	}

	[RuleVersion(0)]
	public CommandParametersContext commandParameters() {
		CommandParametersContext _localctx = new CommandParametersContext(Context, State);
		EnterRule(_localctx, 88, RULE_commandParameters);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 449;
				commandSlashOptions();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450;
				commandMacroOptions();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 451;
				commandEmptyOptions();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 4);
				{
				State = 452;
				commandMaxLength();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandParametersContext[] commandParameters() {
			return GetRuleContexts<CommandParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandParametersContext commandParameters(int i) {
			return GetRuleContext<CommandParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParserParser.Comma, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 90, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(T__28);
			{
			State = 456;
			commandParameters();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 457;
				Match(Comma);
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 503316480L) != 0)) {
					{
					{
					State = 458;
					commandParameters();
					}
					}
					State = 463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
			State = 466;
			Match(T__14);
			State = 467;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeprecatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionString() { return GetToken(mcdocParserParser.VersionString, 0); }
		public DeprecatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deprecated; } }
	}

	[RuleVersion(0)]
	public DeprecatedContext deprecated() {
		DeprecatedContext _localctx = new DeprecatedContext(Context, State);
		EnterRule(_localctx, 92, RULE_deprecated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(T__29);
			State = 470;
			Match(VersionString);
			State = 471;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dispatcher_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DispatcherKeyString() { return GetToken(mcdocParserParser.DispatcherKeyString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public Dispatcher_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatcher_key; } }
	}

	[RuleVersion(0)]
	public Dispatcher_keyContext dispatcher_key() {
		Dispatcher_keyContext _localctx = new Dispatcher_keyContext(Context, State);
		EnterRule(_localctx, 94, RULE_dispatcher_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(T__30);
			State = 474;
			Match(DispatcherKeyString);
			State = 475;
			Match(T__7);
			State = 476;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Divisible_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParserParser.IntKeyType, 0); }
		public Divisible_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divisible_by; } }
	}

	[RuleVersion(0)]
	public Divisible_byContext divisible_by() {
		Divisible_byContext _localctx = new Divisible_byContext(Context, State);
		EnterRule(_localctx, 96, RULE_divisible_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(T__31);
			State = 479;
			integer();
			State = 480;
			Match(T__7);
			State = 481;
			Match(IntKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityAmountContext : ParserRuleContext {
		public EntityAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityAmount; } }
	}

	[RuleVersion(0)]
	public EntityAmountContext entityAmount() {
		EntityAmountContext _localctx = new EntityAmountContext(Context, State);
		EnterRule(_localctx, 98, RULE_entityAmount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(T__32);
			State = 484;
			_la = TokenStream.LA(1);
			if ( !(_la==T__33 || _la==T__34) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityTypeContext : ParserRuleContext {
		public EntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityType; } }
	}

	[RuleVersion(0)]
	public EntityTypeContext entityType() {
		EntityTypeContext _localctx = new EntityTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_entityType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(T__35);
			State = 487;
			_la = TokenStream.LA(1);
			if ( !(_la==T__36 || _la==T__37) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityAmountContext entityAmount() {
			return GetRuleContext<EntityAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityTypeContext entityType() {
			return GetRuleContext<EntityTypeContext>(0);
		}
		public EntityParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityParameters; } }
	}

	[RuleVersion(0)]
	public EntityParametersContext entityParameters() {
		EntityParametersContext _localctx = new EntityParametersContext(Context, State);
		EnterRule(_localctx, 102, RULE_entityParameters);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				entityAmount();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				entityType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityParametersContext[] entityParameters() {
			return GetRuleContexts<EntityParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityParametersContext entityParameters(int i) {
			return GetRuleContext<EntityParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParserParser.Comma, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 104, RULE_entity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(T__38);
			{
			State = 494;
			entityParameters();
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 495;
				Match(Comma);
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__32 || _la==T__35) {
					{
					{
					State = 496;
					entityParameters();
					}
					}
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
			State = 504;
			Match(T__14);
			State = 505;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameRuleParameterContext : ParserRuleContext {
		public GameRuleParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameRuleParameter; } }
	}

	[RuleVersion(0)]
	public GameRuleParameterContext gameRuleParameter() {
		GameRuleParameterContext _localctx = new GameRuleParameterContext(Context, State);
		EnterRule(_localctx, 106, RULE_gameRuleParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(T__35);
			State = 508;
			_la = TokenStream.LA(1);
			if ( !(_la==T__39 || _la==T__40) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameRuleParameterContext gameRuleParameter() {
			return GetRuleContext<GameRuleParameterContext>(0);
		}
		public GameRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameRule; } }
	}

	[RuleVersion(0)]
	public GameRuleContext gameRule() {
		GameRuleContext _localctx = new GameRuleContext(Context, State);
		EnterRule(_localctx, 108, RULE_gameRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(T__41);
			State = 511;
			gameRuleParameter();
			State = 512;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdRegistryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParserParser.String, 0); }
		public IdRegistryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idRegistry; } }
	}

	[RuleVersion(0)]
	public IdRegistryContext idRegistry() {
		IdRegistryContext _localctx = new IdRegistryContext(Context, State);
		EnterRule(_localctx, 110, RULE_idRegistry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(T__43);
			State = 515;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdTagsContext : ParserRuleContext {
		public IdTagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idTags; } }
	}

	[RuleVersion(0)]
	public IdTagsContext idTags() {
		IdTagsContext _localctx = new IdTagsContext(Context, State);
		EnterRule(_localctx, 112, RULE_idTags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(T__44);
			State = 518;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581209243648L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdRegistryContext idRegistry() {
			return GetRuleContext<IdRegistryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTagsContext idTags() {
			return GetRuleContext<IdTagsContext>(0);
		}
		public IdParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idParameters; } }
	}

	[RuleVersion(0)]
	public IdParametersContext idParameters() {
		IdParametersContext _localctx = new IdParametersContext(Context, State);
		EnterRule(_localctx, 114, RULE_idParameters);
		try {
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				idRegistry();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				idTags();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdParametersContext[] idParameters() {
			return GetRuleContexts<IdParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdParametersContext idParameters(int i) {
			return GetRuleContext<IdParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParserParser.Comma, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 116, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(T__48);
			{
			State = 525;
			idParameters();
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 526;
				Match(Comma);
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__43 || _la==T__44) {
					{
					{
					State = 527;
					idParameters();
					}
					}
					State = 532;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
			State = 535;
			Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_regexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegexPattern() { return GetToken(mcdocParserParser.RegexPattern, 0); }
		public Match_regexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_regex; } }
	}

	[RuleVersion(0)]
	public Match_regexContext match_regex() {
		Match_regexContext _localctx = new Match_regexContext(Context, State);
		EnterRule(_localctx, 118, RULE_match_regex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(T__50);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RegexPattern) {
				{
				State = 538;
				Match(RegexPattern);
				}
			}

			State = 541;
			Match(T__51);
			State = 542;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NbtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public NbtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbt; } }
	}

	[RuleVersion(0)]
	public NbtContext nbt() {
		NbtContext _localctx = new NbtContext(Context, State);
		EnterRule(_localctx, 120, RULE_nbt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(T__52);
			State = 545;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nbt_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public Nbt_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbt_path; } }
	}

	[RuleVersion(0)]
	public Nbt_pathContext nbt_path() {
		Nbt_pathContext _localctx = new Nbt_pathContext(Context, State);
		EnterRule(_localctx, 122, RULE_nbt_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(T__53);
			State = 548;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public ObjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objective; } }
	}

	[RuleVersion(0)]
	public ObjectiveContext objective() {
		ObjectiveContext _localctx = new ObjectiveContext(Context, State);
		EnterRule(_localctx, 124, RULE_objective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(T__54);
			State = 551;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regex_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public Regex_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex_pattern; } }
	}

	[RuleVersion(0)]
	public Regex_patternContext regex_pattern() {
		Regex_patternContext _localctx = new Regex_patternContext(Context, State);
		EnterRule(_localctx, 126, RULE_regex_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(T__55);
			State = 554;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Score_holderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public Score_holderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score_holder; } }
	}

	[RuleVersion(0)]
	public Score_holderContext score_holder() {
		Score_holderContext _localctx = new Score_holderContext(Context, State);
		EnterRule(_localctx, 128, RULE_score_holder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(T__56);
			State = 557;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionString() { return GetToken(mcdocParserParser.VersionString, 0); }
		public SinceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_since; } }
	}

	[RuleVersion(0)]
	public SinceContext since() {
		SinceContext _localctx = new SinceContext(Context, State);
		EnterRule(_localctx, 130, RULE_since);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(T__57);
			State = 560;
			Match(VersionString);
			State = 561;
			Match(T__51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionString() { return GetToken(mcdocParserParser.VersionString, 0); }
		public UntilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until; } }
	}

	[RuleVersion(0)]
	public UntilContext until() {
		UntilContext _localctx = new UntilContext(Context, State);
		EnterRule(_localctx, 132, RULE_until);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(T__58);
			State = 564;
			Match(VersionString);
			State = 565;
			Match(T__51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 134, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(T__59);
			State = 568;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public TeamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team; } }
	}

	[RuleVersion(0)]
	public TeamContext team() {
		TeamContext _localctx = new TeamContext(Context, State);
		EnterRule(_localctx, 136, RULE_team);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(T__60);
			State = 571;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_componentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParserParser.StringKeyType, 0); }
		public Text_componentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_component; } }
	}

	[RuleVersion(0)]
	public Text_componentContext text_component() {
		Text_componentContext _localctx = new Text_componentContext(Context, State);
		EnterRule(_localctx, 138, RULE_text_component);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(T__61);
			State = 574;
			Match(StringKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidContext : ParserRuleContext {
		public UuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuid; } }
	}

	[RuleVersion(0)]
	public UuidContext uuid() {
		UuidContext _localctx = new UuidContext(Context, State);
		EnterRule(_localctx, 140, RULE_uuid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(T__62);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperPrefixContext : ParserRuleContext {
		public SuperPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superPrefix; } }
	}

	[RuleVersion(0)]
	public SuperPrefixContext superPrefix() {
		SuperPrefixContext _localctx = new SuperPrefixContext(Context, State);
		EnterRule(_localctx, 142, RULE_superPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(T__63);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsefilePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SuperPrefixContext superPrefix() {
			return GetRuleContext<SuperPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DoubleColon() { return GetTokens(mcdocParserParser.DoubleColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleColon(int i) {
			return GetToken(mcdocParserParser.DoubleColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DocFilePath() { return GetTokens(mcdocParserParser.DocFilePath); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocFilePath(int i) {
			return GetToken(mcdocParserParser.DocFilePath, i);
		}
		public UsefilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usefilePath; } }
	}

	[RuleVersion(0)]
	public UsefilePathContext usefilePath() {
		UsefilePathContext _localctx = new UsefilePathContext(Context, State);
		EnterRule(_localctx, 144, RULE_usefilePath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 580;
				superPrefix();
				}
			}

			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 583;
				Match(DoubleColon);
				State = 584;
				Match(DocFilePath);
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DoubleColon );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsefilePathContext usefilePath() {
			return GetRuleContext<UsefilePathContext>(0);
		}
		public UseSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useSentence; } }
	}

	[RuleVersion(0)]
	public UseSentenceContext useSentence() {
		UseSentenceContext _localctx = new UseSentenceContext(Context, State);
		EnterRule(_localctx, 146, RULE_useSentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(T__64);
			State = 590;
			usefilePath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocumentAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeprecatedContext deprecated() {
			return GetRuleContext<DeprecatedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dispatcher_keyContext dispatcher_key() {
			return GetRuleContext<Dispatcher_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Divisible_byContext divisible_by() {
			return GetRuleContext<Divisible_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GameRuleContext gameRule() {
			return GetRuleContext<GameRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NbtContext nbt() {
			return GetRuleContext<NbtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nbt_pathContext nbt_path() {
			return GetRuleContext<Nbt_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectiveContext objective() {
			return GetRuleContext<ObjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Regex_patternContext regex_pattern() {
			return GetRuleContext<Regex_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Score_holderContext score_holder() {
			return GetRuleContext<Score_holderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SinceContext since() {
			return GetRuleContext<SinceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_componentContext text_component() {
			return GetRuleContext<Text_componentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilContext until() {
			return GetRuleContext<UntilContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidContext uuid() {
			return GetRuleContext<UuidContext>(0);
		}
		public DocumentAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_documentAttributes; } }
	}

	[RuleVersion(0)]
	public DocumentAttributesContext documentAttributes() {
		DocumentAttributesContext _localctx = new DocumentAttributesContext(Context, State);
		EnterRule(_localctx, 148, RULE_documentAttributes);
		try {
			State = 608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				deprecated();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				dispatcher_key();
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594;
				divisible_by();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 4);
				{
				State = 595;
				entity();
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 5);
				{
				State = 596;
				gameRule();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 6);
				{
				State = 597;
				nbt();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 7);
				{
				State = 598;
				nbt_path();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 8);
				{
				State = 599;
				objective();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 9);
				{
				State = 600;
				regex_pattern();
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 10);
				{
				State = 601;
				score_holder();
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 11);
				{
				State = 602;
				since();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 12);
				{
				State = 603;
				tag();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 13);
				{
				State = 604;
				team();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 14);
				{
				State = 605;
				text_component();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 15);
				{
				State = 606;
				until();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 16);
				{
				State = 607;
				uuid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext fieldValue() {
			return GetRuleContext<FieldValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ColonMark() { return GetToken(mcdocParserParser.ColonMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuestionMarkContext questionMark() {
			return GetRuleContext<QuestionMarkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParserParser.Comma, 0); }
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 150, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			fieldValue();
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 611;
				questionMark();
				}
			}

			State = 614;
			Match(ColonMark);
			State = 615;
			dataType();
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 616;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParserParser.FieldValue, 0); }
		public StructReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structReference; } }
	}

	[RuleVersion(0)]
	public StructReferenceContext structReference() {
		StructReferenceContext _localctx = new StructReferenceContext(Context, State);
		EnterRule(_localctx, 152, RULE_structReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(T__65);
			State = 620;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperInvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParserParser.FieldValue, 0); }
		public SuperInvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superInvoke; } }
	}

	[RuleVersion(0)]
	public SuperInvokeContext superInvoke() {
		SuperInvokeContext _localctx = new SuperInvokeContext(Context, State);
		EnterRule(_localctx, 154, RULE_superInvoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(T__66);
			State = 623;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext[] summary() {
			return GetRuleContexts<SummaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary(int i) {
			return GetRuleContext<SummaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperInvokeContext[] superInvoke() {
			return GetRuleContexts<SuperInvokeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperInvokeContext superInvoke(int i) {
			return GetRuleContext<SuperInvokeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructReferenceContext[] structReference() {
			return GetRuleContexts<StructReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructReferenceContext structReference(int i) {
			return GetRuleContext<StructReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocumentAttributesContext[] documentAttributes() {
			return GetRuleContexts<DocumentAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocumentAttributesContext documentAttributes(int i) {
			return GetRuleContext<DocumentAttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public StructContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structContent; } }
	}

	[RuleVersion(0)]
	public StructContentContext structContent() {
		StructContentContext _localctx = new StructContentContext(Context, State);
		EnterRule(_localctx, 156, RULE_structContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 629;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Summary:
						{
						State = 625;
						summary();
						}
						break;
					case T__66:
						{
						State = 626;
						superInvoke();
						}
						break;
					case T__65:
						{
						State = 627;
						structReference();
						}
						break;
					case T__29:
					case T__30:
					case T__31:
					case T__38:
					case T__41:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case T__57:
					case T__58:
					case T__59:
					case T__60:
					case T__61:
					case T__62:
						{
						State = 628;
						documentAttributes();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 631;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 634;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 633;
					fields();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParserParser.FieldValue, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 158, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContentContext structContent() {
			return GetRuleContext<StructContentContext>(0);
		}
		public StructSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSentence; } }
	}

	[RuleVersion(0)]
	public StructSentenceContext structSentence() {
		StructSentenceContext _localctx = new StructSentenceContext(Context, State);
		EnterRule(_localctx, 160, RULE_structSentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(T__67);
			State = 641;
			structName();
			State = 642;
			Match(T__10);
			State = 643;
			structContent();
			State = 644;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructSentenceContext structSentence() {
			return GetRuleContext<StructSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseSentenceContext[] useSentence() {
			return GetRuleContexts<UseSentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseSentenceContext useSentence(int i) {
			return GetRuleContext<UseSentenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext[] summary() {
			return GetRuleContexts<SummaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary(int i) {
			return GetRuleContext<SummaryContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 162, RULE_document);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 646;
					useSentence();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 652;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 651;
					summary();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 656;
			structSentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,106,659,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,3,7,180,8,7,1,7,1,7,1,7,1,7,3,7,186,8,7,
		3,7,188,8,7,1,8,3,8,191,8,8,1,8,1,8,1,8,1,8,3,8,197,8,8,3,8,199,8,8,1,
		9,1,9,3,9,203,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,
		14,1,14,3,14,217,8,14,1,14,1,14,1,14,3,14,222,8,14,1,14,1,14,1,14,3,14,
		227,8,14,1,14,1,14,1,14,3,14,232,8,14,1,14,1,14,1,14,3,14,237,8,14,1,14,
		1,14,1,14,3,14,242,8,14,3,14,244,8,14,1,15,1,15,1,15,1,15,1,15,3,15,251,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,261,8,16,11,16,12,16,
		262,1,16,3,16,266,8,16,1,16,1,16,3,16,270,8,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,289,8,
		21,10,21,12,21,292,9,21,1,21,3,21,295,8,21,1,21,1,21,3,21,299,8,21,1,22,
		1,22,1,22,1,22,1,22,1,22,3,22,307,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,25,5,25,321,8,25,10,25,12,25,324,9,25,1,25,3,
		25,327,8,25,3,25,329,8,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,338,
		8,27,10,27,12,27,341,9,27,1,27,3,27,344,8,27,1,27,1,27,1,28,1,28,1,29,
		1,29,1,29,1,29,1,29,1,29,5,29,356,8,29,10,29,12,29,359,9,29,1,29,3,29,
		362,8,29,1,29,1,29,3,29,366,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,3,30,381,8,30,1,31,1,31,1,31,1,31,5,31,387,
		8,31,10,31,12,31,390,9,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
		1,34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,408,8,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,3,36,417,8,36,3,36,419,8,36,1,37,1,37,1,37,1,37,3,37,425,
		8,37,1,38,1,38,4,38,429,8,38,11,38,12,38,430,1,39,1,39,1,39,1,39,1,39,
		1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,
		1,44,1,44,3,44,454,8,44,1,45,1,45,1,45,1,45,5,45,460,8,45,10,45,12,45,
		463,9,45,3,45,465,8,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,
		47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,
		51,1,51,3,51,492,8,51,1,52,1,52,1,52,1,52,5,52,498,8,52,10,52,12,52,501,
		9,52,3,52,503,8,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,
		55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,3,57,523,8,57,1,58,1,58,1,58,1,58,
		5,58,529,8,58,10,58,12,58,532,9,58,3,58,534,8,58,1,58,1,58,1,59,1,59,3,
		59,540,8,59,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,
		1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,
		1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,
		3,72,582,8,72,1,72,1,72,4,72,586,8,72,11,72,12,72,587,1,73,1,73,1,73,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,3,74,609,8,74,1,75,1,75,3,75,613,8,75,1,75,1,75,1,75,3,75,618,
		8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,4,78,630,8,78,11,
		78,12,78,631,1,78,4,78,635,8,78,11,78,12,78,636,1,79,1,79,1,80,1,80,1,
		80,1,80,1,80,1,80,1,81,4,81,648,8,81,11,81,12,81,649,1,81,4,81,653,8,81,
		11,81,12,81,654,1,81,1,81,1,81,4,631,636,649,654,0,82,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,0,11,1,0,70,77,1,0,4,5,3,0,4,5,
		81,81,99,99,2,0,70,70,72,77,2,0,81,81,99,99,1,0,104,105,3,0,72,72,74,74,
		77,77,1,0,34,35,1,0,37,38,1,0,40,41,1,0,46,48,669,0,164,1,0,0,0,2,166,
		1,0,0,0,4,168,1,0,0,0,6,170,1,0,0,0,8,172,1,0,0,0,10,174,1,0,0,0,12,176,
		1,0,0,0,14,187,1,0,0,0,16,198,1,0,0,0,18,202,1,0,0,0,20,204,1,0,0,0,22,
		206,1,0,0,0,24,208,1,0,0,0,26,211,1,0,0,0,28,243,1,0,0,0,30,245,1,0,0,
		0,32,269,1,0,0,0,34,271,1,0,0,0,36,273,1,0,0,0,38,275,1,0,0,0,40,277,1,
		0,0,0,42,298,1,0,0,0,44,300,1,0,0,0,46,310,1,0,0,0,48,312,1,0,0,0,50,328,
		1,0,0,0,52,330,1,0,0,0,54,332,1,0,0,0,56,347,1,0,0,0,58,365,1,0,0,0,60,
		380,1,0,0,0,62,382,1,0,0,0,64,391,1,0,0,0,66,393,1,0,0,0,68,395,1,0,0,
		0,70,401,1,0,0,0,72,418,1,0,0,0,74,424,1,0,0,0,76,426,1,0,0,0,78,432,1,
		0,0,0,80,437,1,0,0,0,82,440,1,0,0,0,84,443,1,0,0,0,86,446,1,0,0,0,88,453,
		1,0,0,0,90,455,1,0,0,0,92,469,1,0,0,0,94,473,1,0,0,0,96,478,1,0,0,0,98,
		483,1,0,0,0,100,486,1,0,0,0,102,491,1,0,0,0,104,493,1,0,0,0,106,507,1,
		0,0,0,108,510,1,0,0,0,110,514,1,0,0,0,112,517,1,0,0,0,114,522,1,0,0,0,
		116,524,1,0,0,0,118,537,1,0,0,0,120,544,1,0,0,0,122,547,1,0,0,0,124,550,
		1,0,0,0,126,553,1,0,0,0,128,556,1,0,0,0,130,559,1,0,0,0,132,563,1,0,0,
		0,134,567,1,0,0,0,136,570,1,0,0,0,138,573,1,0,0,0,140,576,1,0,0,0,142,
		578,1,0,0,0,144,581,1,0,0,0,146,589,1,0,0,0,148,608,1,0,0,0,150,610,1,
		0,0,0,152,619,1,0,0,0,154,622,1,0,0,0,156,629,1,0,0,0,158,638,1,0,0,0,
		160,640,1,0,0,0,162,647,1,0,0,0,164,165,7,0,0,0,165,1,1,0,0,0,166,167,
		5,84,0,0,167,3,1,0,0,0,168,169,5,86,0,0,169,5,1,0,0,0,170,171,5,97,0,0,
		171,7,1,0,0,0,172,173,5,1,0,0,173,9,1,0,0,0,174,175,5,79,0,0,175,11,1,
		0,0,0,176,177,5,78,0,0,177,13,1,0,0,0,178,180,5,2,0,0,179,178,1,0,0,0,
		179,180,1,0,0,0,180,181,1,0,0,0,181,188,3,2,1,0,182,183,3,2,1,0,183,185,
		5,2,0,0,184,186,3,2,1,0,185,184,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,
		0,187,179,1,0,0,0,187,182,1,0,0,0,188,15,1,0,0,0,189,191,5,2,0,0,190,189,
		1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,199,3,4,2,0,193,194,3,4,2,
		0,194,196,5,2,0,0,195,197,3,4,2,0,196,195,1,0,0,0,196,197,1,0,0,0,197,
		199,1,0,0,0,198,190,1,0,0,0,198,193,1,0,0,0,199,17,1,0,0,0,200,203,5,3,
		0,0,201,203,3,20,10,0,202,200,1,0,0,0,202,201,1,0,0,0,203,19,1,0,0,0,204,
		205,7,1,0,0,205,21,1,0,0,0,206,207,5,71,0,0,207,23,1,0,0,0,208,209,5,70,
		0,0,209,210,3,14,7,0,210,25,1,0,0,0,211,212,7,2,0,0,212,27,1,0,0,0,213,
		216,5,72,0,0,214,215,5,6,0,0,215,217,3,14,7,0,216,214,1,0,0,0,216,217,
		1,0,0,0,217,244,1,0,0,0,218,221,5,73,0,0,219,220,5,6,0,0,220,222,3,14,
		7,0,221,219,1,0,0,0,221,222,1,0,0,0,222,244,1,0,0,0,223,226,5,74,0,0,224,
		225,5,6,0,0,225,227,3,14,7,0,226,224,1,0,0,0,226,227,1,0,0,0,227,244,1,
		0,0,0,228,231,5,77,0,0,229,230,5,6,0,0,230,232,3,14,7,0,231,229,1,0,0,
		0,231,232,1,0,0,0,232,244,1,0,0,0,233,236,5,75,0,0,234,235,5,6,0,0,235,
		237,3,14,7,0,236,234,1,0,0,0,236,237,1,0,0,0,237,244,1,0,0,0,238,241,5,
		76,0,0,239,240,5,6,0,0,240,242,3,14,7,0,241,239,1,0,0,0,241,242,1,0,0,
		0,242,244,1,0,0,0,243,213,1,0,0,0,243,218,1,0,0,0,243,223,1,0,0,0,243,
		228,1,0,0,0,243,233,1,0,0,0,243,238,1,0,0,0,244,29,1,0,0,0,245,246,5,7,
		0,0,246,247,3,62,31,0,247,250,5,8,0,0,248,249,5,6,0,0,249,251,3,14,7,0,
		250,248,1,0,0,0,250,251,1,0,0,0,251,31,1,0,0,0,252,253,5,7,0,0,253,254,
		3,62,31,0,254,255,5,9,0,0,255,270,1,0,0,0,256,257,5,7,0,0,257,260,3,62,
		31,0,258,259,5,92,0,0,259,261,3,62,31,0,260,258,1,0,0,0,261,262,1,0,0,
		0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,5,92,0,0,265,
		264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,8,0,0,268,270,1,
		0,0,0,269,252,1,0,0,0,269,256,1,0,0,0,270,33,1,0,0,0,271,272,3,10,5,0,
		272,35,1,0,0,0,273,274,7,3,0,0,274,37,1,0,0,0,275,276,7,4,0,0,276,39,1,
		0,0,0,277,278,3,34,17,0,278,279,3,6,3,0,279,280,5,10,0,0,280,281,3,38,
		19,0,281,41,1,0,0,0,282,283,5,11,0,0,283,299,5,12,0,0,284,285,5,11,0,0,
		285,290,3,40,20,0,286,287,5,92,0,0,287,289,3,40,20,0,288,286,1,0,0,0,289,
		292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,294,1,0,0,0,292,290,1,
		0,0,0,293,295,5,92,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,
		296,297,5,12,0,0,297,299,1,0,0,0,298,282,1,0,0,0,298,284,1,0,0,0,299,43,
		1,0,0,0,300,301,3,34,17,0,301,302,5,13,0,0,302,303,5,14,0,0,303,304,3,
		36,18,0,304,306,5,15,0,0,305,307,3,6,3,0,306,305,1,0,0,0,306,307,1,0,0,
		0,307,308,1,0,0,0,308,309,3,42,21,0,309,45,1,0,0,0,310,311,5,101,0,0,311,
		47,1,0,0,0,312,313,5,94,0,0,313,314,3,54,27,0,314,49,1,0,0,0,315,316,5,
		14,0,0,316,329,5,15,0,0,317,322,3,62,31,0,318,319,5,16,0,0,319,321,3,62,
		31,0,320,318,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,
		326,1,0,0,0,324,322,1,0,0,0,325,327,5,16,0,0,326,325,1,0,0,0,326,327,1,
		0,0,0,327,329,1,0,0,0,328,315,1,0,0,0,328,317,1,0,0,0,329,51,1,0,0,0,330,
		331,7,5,0,0,331,53,1,0,0,0,332,333,5,7,0,0,333,339,3,52,26,0,334,335,3,
		52,26,0,335,336,5,92,0,0,336,338,1,0,0,0,337,334,1,0,0,0,338,341,1,0,0,
		0,339,337,1,0,0,0,339,340,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,342,
		344,5,92,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,5,
		8,0,0,346,55,1,0,0,0,347,348,3,54,27,0,348,57,1,0,0,0,349,350,5,17,0,0,
		350,366,5,18,0,0,351,357,3,62,31,0,352,353,3,62,31,0,353,354,5,19,0,0,
		354,356,1,0,0,0,355,352,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,
		1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,360,362,5,92,0,0,361,360,1,0,0,
		0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,5,18,0,0,364,366,1,0,0,0,365,
		349,1,0,0,0,365,351,1,0,0,0,366,59,1,0,0,0,367,381,3,18,9,0,368,381,3,
		24,12,0,369,381,3,26,13,0,370,381,3,28,14,0,371,381,3,72,36,0,372,381,
		3,30,15,0,373,381,3,32,16,0,374,381,3,44,22,0,375,381,3,160,80,0,376,381,
		3,46,23,0,377,381,3,48,24,0,378,381,3,50,25,0,379,381,3,56,28,0,380,367,
		1,0,0,0,380,368,1,0,0,0,380,369,1,0,0,0,380,370,1,0,0,0,380,371,1,0,0,
		0,380,372,1,0,0,0,380,373,1,0,0,0,380,374,1,0,0,0,380,375,1,0,0,0,380,
		376,1,0,0,0,380,377,1,0,0,0,380,378,1,0,0,0,380,379,1,0,0,0,381,61,1,0,
		0,0,382,383,3,148,74,0,383,388,3,60,30,0,384,387,3,54,27,0,385,387,3,58,
		29,0,386,384,1,0,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,
		389,1,0,0,0,389,63,1,0,0,0,390,388,1,0,0,0,391,392,5,78,0,0,392,65,1,0,
		0,0,393,394,5,78,0,0,394,67,1,0,0,0,395,396,5,20,0,0,396,397,3,64,32,0,
		397,398,5,10,0,0,398,399,3,66,33,0,399,400,5,8,0,0,400,69,1,0,0,0,401,
		402,5,21,0,0,402,403,5,91,0,0,403,71,1,0,0,0,404,407,7,6,0,0,405,406,5,
		6,0,0,406,408,3,14,7,0,407,405,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,
		409,419,5,22,0,0,410,411,5,7,0,0,411,412,7,6,0,0,412,413,5,8,0,0,413,416,
		1,0,0,0,414,415,5,6,0,0,415,417,3,14,7,0,416,414,1,0,0,0,416,417,1,0,0,
		0,417,419,1,0,0,0,418,404,1,0,0,0,418,410,1,0,0,0,419,73,1,0,0,0,420,425,
		3,72,36,0,421,425,3,22,11,0,422,425,3,28,14,0,423,425,3,68,34,0,424,420,
		1,0,0,0,424,421,1,0,0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,75,1,0,0,0,
		426,428,5,23,0,0,427,429,3,74,37,0,428,427,1,0,0,0,429,430,1,0,0,0,430,
		428,1,0,0,0,430,431,1,0,0,0,431,77,1,0,0,0,432,433,5,24,0,0,433,434,5,
		81,0,0,434,435,5,8,0,0,435,436,3,74,37,0,436,79,1,0,0,0,437,438,5,25,0,
		0,438,439,5,81,0,0,439,81,1,0,0,0,440,441,5,26,0,0,441,442,5,81,0,0,442,
		83,1,0,0,0,443,444,5,27,0,0,444,445,5,81,0,0,445,85,1,0,0,0,446,447,5,
		28,0,0,447,448,3,2,1,0,448,87,1,0,0,0,449,454,3,80,40,0,450,454,3,82,41,
		0,451,454,3,84,42,0,452,454,3,86,43,0,453,449,1,0,0,0,453,450,1,0,0,0,
		453,451,1,0,0,0,453,452,1,0,0,0,454,89,1,0,0,0,455,456,5,29,0,0,456,464,
		3,88,44,0,457,461,5,92,0,0,458,460,3,88,44,0,459,458,1,0,0,0,460,463,1,
		0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,
		464,457,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,5,15,0,0,467,468,
		5,70,0,0,468,91,1,0,0,0,469,470,5,30,0,0,470,471,5,87,0,0,471,472,5,8,
		0,0,472,93,1,0,0,0,473,474,5,31,0,0,474,475,5,88,0,0,475,476,5,8,0,0,476,
		477,5,70,0,0,477,95,1,0,0,0,478,479,5,32,0,0,479,480,3,2,1,0,480,481,5,
		8,0,0,481,482,5,74,0,0,482,97,1,0,0,0,483,484,5,33,0,0,484,485,7,7,0,0,
		485,99,1,0,0,0,486,487,5,36,0,0,487,488,7,8,0,0,488,101,1,0,0,0,489,492,
		3,98,49,0,490,492,3,100,50,0,491,489,1,0,0,0,491,490,1,0,0,0,492,103,1,
		0,0,0,493,494,5,39,0,0,494,502,3,102,51,0,495,499,5,92,0,0,496,498,3,102,
		51,0,497,496,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,
		503,1,0,0,0,501,499,1,0,0,0,502,495,1,0,0,0,502,503,1,0,0,0,503,504,1,
		0,0,0,504,505,5,15,0,0,505,506,5,70,0,0,506,105,1,0,0,0,507,508,5,36,0,
		0,508,509,7,9,0,0,509,107,1,0,0,0,510,511,5,42,0,0,511,512,3,106,53,0,
		512,513,5,43,0,0,513,109,1,0,0,0,514,515,5,44,0,0,515,516,5,81,0,0,516,
		111,1,0,0,0,517,518,5,45,0,0,518,519,7,10,0,0,519,113,1,0,0,0,520,523,
		3,110,55,0,521,523,3,112,56,0,522,520,1,0,0,0,522,521,1,0,0,0,523,115,
		1,0,0,0,524,525,5,49,0,0,525,533,3,114,57,0,526,530,5,92,0,0,527,529,3,
		114,57,0,528,527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,
		0,531,534,1,0,0,0,532,530,1,0,0,0,533,526,1,0,0,0,533,534,1,0,0,0,534,
		535,1,0,0,0,535,536,5,50,0,0,536,117,1,0,0,0,537,539,5,51,0,0,538,540,
		5,80,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,52,
		0,0,542,543,5,70,0,0,543,119,1,0,0,0,544,545,5,53,0,0,545,546,5,70,0,0,
		546,121,1,0,0,0,547,548,5,54,0,0,548,549,5,70,0,0,549,123,1,0,0,0,550,
		551,5,55,0,0,551,552,5,70,0,0,552,125,1,0,0,0,553,554,5,56,0,0,554,555,
		5,70,0,0,555,127,1,0,0,0,556,557,5,57,0,0,557,558,5,70,0,0,558,129,1,0,
		0,0,559,560,5,58,0,0,560,561,5,87,0,0,561,562,5,52,0,0,562,131,1,0,0,0,
		563,564,5,59,0,0,564,565,5,87,0,0,565,566,5,52,0,0,566,133,1,0,0,0,567,
		568,5,60,0,0,568,569,5,70,0,0,569,135,1,0,0,0,570,571,5,61,0,0,571,572,
		5,70,0,0,572,137,1,0,0,0,573,574,5,62,0,0,574,575,5,70,0,0,575,139,1,0,
		0,0,576,577,5,63,0,0,577,141,1,0,0,0,578,579,5,64,0,0,579,143,1,0,0,0,
		580,582,3,142,71,0,581,580,1,0,0,0,581,582,1,0,0,0,582,585,1,0,0,0,583,
		584,5,82,0,0,584,586,5,83,0,0,585,583,1,0,0,0,586,587,1,0,0,0,587,585,
		1,0,0,0,587,588,1,0,0,0,588,145,1,0,0,0,589,590,5,65,0,0,590,591,3,144,
		72,0,591,147,1,0,0,0,592,609,3,92,46,0,593,609,3,94,47,0,594,609,3,96,
		48,0,595,609,3,104,52,0,596,609,3,108,54,0,597,609,3,120,60,0,598,609,
		3,122,61,0,599,609,3,124,62,0,600,609,3,126,63,0,601,609,3,128,64,0,602,
		609,3,130,65,0,603,609,3,134,67,0,604,609,3,136,68,0,605,609,3,138,69,
		0,606,609,3,132,66,0,607,609,3,140,70,0,608,592,1,0,0,0,608,593,1,0,0,
		0,608,594,1,0,0,0,608,595,1,0,0,0,608,596,1,0,0,0,608,597,1,0,0,0,608,
		598,1,0,0,0,608,599,1,0,0,0,608,600,1,0,0,0,608,601,1,0,0,0,608,602,1,
		0,0,0,608,603,1,0,0,0,608,604,1,0,0,0,608,605,1,0,0,0,608,606,1,0,0,0,
		608,607,1,0,0,0,609,149,1,0,0,0,610,612,3,12,6,0,611,613,3,8,4,0,612,611,
		1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,5,98,0,0,615,617,3,74,
		37,0,616,618,5,92,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,151,1,0,0,0,
		619,620,5,66,0,0,620,621,5,78,0,0,621,153,1,0,0,0,622,623,5,67,0,0,623,
		624,5,78,0,0,624,155,1,0,0,0,625,630,3,10,5,0,626,630,3,154,77,0,627,630,
		3,152,76,0,628,630,3,148,74,0,629,625,1,0,0,0,629,626,1,0,0,0,629,627,
		1,0,0,0,629,628,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,631,629,1,0,0,
		0,632,634,1,0,0,0,633,635,3,150,75,0,634,633,1,0,0,0,635,636,1,0,0,0,636,
		637,1,0,0,0,636,634,1,0,0,0,637,157,1,0,0,0,638,639,5,78,0,0,639,159,1,
		0,0,0,640,641,5,68,0,0,641,642,3,158,79,0,642,643,5,11,0,0,643,644,3,156,
		78,0,644,645,5,12,0,0,645,161,1,0,0,0,646,648,3,146,73,0,647,646,1,0,0,
		0,648,649,1,0,0,0,649,650,1,0,0,0,649,647,1,0,0,0,650,652,1,0,0,0,651,
		653,3,10,5,0,652,651,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,654,652,1,
		0,0,0,655,656,1,0,0,0,656,657,3,160,80,0,657,163,1,0,0,0,58,179,185,187,
		190,196,198,202,216,221,226,231,236,241,243,250,262,265,269,290,294,298,
		306,322,326,328,339,343,357,361,365,380,386,388,407,416,418,424,430,453,
		461,464,491,499,502,522,530,533,539,581,587,608,612,617,629,631,636,649,
		654
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
