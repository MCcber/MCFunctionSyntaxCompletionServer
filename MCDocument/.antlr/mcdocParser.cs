//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/C#Project/CommandHelper-EfficiencyV/CBHK/Utility/MCDocument/mcdoc.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class mcdocParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, Any=69, StringValue=70, DocFilePath=71, FieldValue=72, 
		QuestionMark=73, ColonMark=74, Integer=75, VersionString=76, DispatcherKeyString=77, 
		DispatcherValue=78, Number=79, NumberRange=80, Comma=81, BlankString=82;
	public const int
		RULE_arrayElementCount = 0, RULE_arrayValueRange = 1, RULE_summary = 2, 
		RULE_fieldValue = 3, RULE_tupleType = 4, RULE_unknownKey = 5, RULE_unknownValue = 6, 
		RULE_unknownResource = 7, RULE_primitiveArrayType = 8, RULE_dataType = 9, 
		RULE_canonical = 10, RULE_color = 11, RULE_commandSlashOptions = 12, RULE_commandMacroOptions = 13, 
		RULE_commandEmptyOptions = 14, RULE_commandMaxLength = 15, RULE_commandParameters = 16, 
		RULE_command = 17, RULE_deprecated = 18, RULE_dispatcher_key = 19, RULE_divisible_by = 20, 
		RULE_entityAmount = 21, RULE_entityType = 22, RULE_entityParameters = 23, 
		RULE_entity = 24, RULE_gameRuleParameter = 25, RULE_game_rule = 26, RULE_idRegistry = 27, 
		RULE_idTags = 28, RULE_idParameters = 29, RULE_id = 30, RULE_match_regex = 31, 
		RULE_nbt = 32, RULE_nbt_path = 33, RULE_objective = 34, RULE_regex_pattern = 35, 
		RULE_score_holder = 36, RULE_since = 37, RULE_until = 38, RULE_tag = 39, 
		RULE_team = 40, RULE_text_component = 41, RULE_uuid = 42, RULE_usefilePath = 43, 
		RULE_useSentence = 44, RULE_attributes = 45, RULE_dispatchSentence = 46, 
		RULE_fields = 47, RULE_structReference = 48, RULE_structName = 49, RULE_structOpenBracket = 50, 
		RULE_structCloseBracket = 51, RULE_superInvoke = 52, RULE_structContent = 53, 
		RULE_structSentence = 54;
	public static readonly string[] ruleNames = {
		"arrayElementCount", "arrayValueRange", "summary", "fieldValue", "tupleType", 
		"unknownKey", "unknownValue", "unknownResource", "primitiveArrayType", 
		"dataType", "canonical", "color", "commandSlashOptions", "commandMacroOptions", 
		"commandEmptyOptions", "commandMaxLength", "commandParameters", "command", 
		"deprecated", "dispatcher_key", "divisible_by", "entityAmount", "entityType", 
		"entityParameters", "entity", "gameRuleParameter", "game_rule", "idRegistry", 
		"idTags", "idParameters", "id", "match_regex", "nbt", "nbt_path", "objective", 
		"regex_pattern", "score_holder", "since", "until", "tag", "team", "text_component", 
		"uuid", "usefilePath", "useSentence", "attributes", "dispatchSentence", 
		"fields", "structReference", "structName", "structOpenBracket", "structCloseBracket", 
		"superInvoke", "structContent", "structSentence"
	};

	private static readonly string[] _LiteralNames = {
		null, "'# '", "'#'", "'//'", "'('", "'|'", "')'", "'#['", "'='", "']'", 
		"'string'", "'bool'", "'short'", "'int'", "'float'", "'double'", "'long'", 
		"'[]'", "'#[canonical]'", "'#[color='", "'slash='", "'macro='", "'empty='", 
		"'max_length='", "'#[command('", "'#[deprecated='", "'#[dispatcher_key='", 
		"'#[divisible_by='", "'amount='", "'multiple'", "'single'", "'type='", 
		"'entities'", "'players'", "'#[entity('", "'\"boolean\"'", "'\"int\"'", 
		"'#[game_rule('", "')]'", "'registry='", "'tags='", "'allowed'", "'implicit'", 
		"'required'", "'#[id('", "')] string'", "'#[match_regex=\"'", "'\"]'", 
		"'#[nbt=ItemStack]'", "'#[nbt_path]'", "'#[objective]'", "'#[regex_pattern]'", 
		"'#[score_holder]'", "'#[since=\"'", "'#[until=\"'", "'#[tag]'", "'#[team]'", 
		"'#[text_component]'", "'#[uuid]'", "'::'", "'super::'", "'use'", "'dispatch'", 
		"'to'", "'...'", "'{'", "'}'", "'...super::'", "'struct'", null, null, 
		null, null, "'?'", "':'", null, null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Any", "StringValue", 
		"DocFilePath", "FieldValue", "QuestionMark", "ColonMark", "Integer", "VersionString", 
		"DispatcherKeyString", "DispatcherValue", "Number", "NumberRange", "Comma", 
		"BlankString"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "mcdoc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static mcdocParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public mcdocParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public mcdocParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ArrayElementCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(mcdocParser.Integer, 0); }
		public ArrayElementCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementCount; } }
	}

	[RuleVersion(0)]
	public ArrayElementCountContext arrayElementCount() {
		ArrayElementCountContext _localctx = new ArrayElementCountContext(Context, State);
		EnterRule(_localctx, 0, RULE_arrayElementCount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(T__0);
			State = 111;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberRange() { return GetToken(mcdocParser.NumberRange, 0); }
		public ArrayValueRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValueRange; } }
	}

	[RuleVersion(0)]
	public ArrayValueRangeContext arrayValueRange() {
		ArrayValueRangeContext _localctx = new ArrayValueRangeContext(Context, State);
		EnterRule(_localctx, 2, RULE_arrayValueRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__1);
			State = 114;
			Match(NumberRange);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(mcdocParser.Any, 0); }
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 4, RULE_summary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__2);
			State = 117;
			Match(Any);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public FieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldValue; } }
	}

	[RuleVersion(0)]
	public FieldValueContext fieldValue() {
		FieldValueContext _localctx = new FieldValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_fieldValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(T__3);
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__6:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
				{
				State = 122;
				dataType();
				}
				break;
			case T__17:
			case T__18:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__33:
			case T__43:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case FieldValue:
				{
				State = 123;
				attributes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 126;
			Match(T__4);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 129;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
				case T__6:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__15:
					{
					State = 127;
					dataType();
					}
					break;
				case T__17:
				case T__18:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__33:
				case T__43:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case T__56:
				case T__57:
				case FieldValue:
					{
					State = 128;
					attributes();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 131;
				Match(T__4);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 576196886945201296L) != 0) || _la==FieldValue );
			State = 137;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public UnknownKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownKey; } }
	}

	[RuleVersion(0)]
	public UnknownKeyContext unknownKey() {
		UnknownKeyContext _localctx = new UnknownKeyContext(Context, State);
		EnterRule(_localctx, 10, RULE_unknownKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public UnknownValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownValue; } }
	}

	[RuleVersion(0)]
	public UnknownValueContext unknownValue() {
		UnknownValueContext _localctx = new UnknownValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_unknownValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnknownKeyContext unknownKey() {
			return GetRuleContext<UnknownKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnknownValueContext unknownValue() {
			return GetRuleContext<UnknownValueContext>(0);
		}
		public UnknownResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownResource; } }
	}

	[RuleVersion(0)]
	public UnknownResourceContext unknownResource() {
		UnknownResourceContext _localctx = new UnknownResourceContext(Context, State);
		EnterRule(_localctx, 14, RULE_unknownResource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(T__6);
			State = 144;
			unknownKey();
			State = 145;
			Match(T__7);
			State = 146;
			unknownValue();
			State = 147;
			Match(T__8);
			State = 148;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValueRangeContext arrayValueRange() {
			return GetRuleContext<ArrayValueRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementCountContext arrayElementCount() {
			return GetRuleContext<ArrayElementCountContext>(0);
		}
		public PrimitiveArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveArrayType; } }
	}

	[RuleVersion(0)]
	public PrimitiveArrayTypeContext primitiveArrayType() {
		PrimitiveArrayTypeContext _localctx = new PrimitiveArrayTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_primitiveArrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 151;
				arrayValueRange();
				}
			}

			State = 154;
			Match(T__16);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 155;
				arrayElementCount();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveArrayTypeContext primitiveArrayType() {
			return GetRuleContext<PrimitiveArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnknownResourceContext unknownResource() {
			return GetRuleContext<UnknownResourceContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_dataType);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				primitiveArrayType();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				tupleType();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				unknownResource();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161;
				Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanonicalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public CanonicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canonical; } }
	}

	[RuleVersion(0)]
	public CanonicalContext canonical() {
		CanonicalContext _localctx = new CanonicalContext(Context, State);
		EnterRule(_localctx, 20, RULE_canonical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(T__17);
			State = 165;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringValue() { return GetToken(mcdocParser.StringValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 22, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__18);
			State = 168;
			Match(StringValue);
			State = 169;
			Match(T__8);
			State = 170;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandSlashOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringValue() { return GetToken(mcdocParser.StringValue, 0); }
		public CommandSlashOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandSlashOptions; } }
	}

	[RuleVersion(0)]
	public CommandSlashOptionsContext commandSlashOptions() {
		CommandSlashOptionsContext _localctx = new CommandSlashOptionsContext(Context, State);
		EnterRule(_localctx, 24, RULE_commandSlashOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__19);
			State = 173;
			Match(StringValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandMacroOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringValue() { return GetToken(mcdocParser.StringValue, 0); }
		public CommandMacroOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandMacroOptions; } }
	}

	[RuleVersion(0)]
	public CommandMacroOptionsContext commandMacroOptions() {
		CommandMacroOptionsContext _localctx = new CommandMacroOptionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_commandMacroOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(T__20);
			State = 176;
			Match(StringValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandEmptyOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringValue() { return GetToken(mcdocParser.StringValue, 0); }
		public CommandEmptyOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandEmptyOptions; } }
	}

	[RuleVersion(0)]
	public CommandEmptyOptionsContext commandEmptyOptions() {
		CommandEmptyOptionsContext _localctx = new CommandEmptyOptionsContext(Context, State);
		EnterRule(_localctx, 28, RULE_commandEmptyOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__21);
			State = 179;
			Match(StringValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandMaxLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(mcdocParser.Integer, 0); }
		public CommandMaxLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandMaxLength; } }
	}

	[RuleVersion(0)]
	public CommandMaxLengthContext commandMaxLength() {
		CommandMaxLengthContext _localctx = new CommandMaxLengthContext(Context, State);
		EnterRule(_localctx, 30, RULE_commandMaxLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__22);
			State = 182;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandSlashOptionsContext commandSlashOptions() {
			return GetRuleContext<CommandSlashOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandMacroOptionsContext commandMacroOptions() {
			return GetRuleContext<CommandMacroOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandEmptyOptionsContext commandEmptyOptions() {
			return GetRuleContext<CommandEmptyOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandMaxLengthContext commandMaxLength() {
			return GetRuleContext<CommandMaxLengthContext>(0);
		}
		public CommandParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandParameters; } }
	}

	[RuleVersion(0)]
	public CommandParametersContext commandParameters() {
		CommandParametersContext _localctx = new CommandParametersContext(Context, State);
		EnterRule(_localctx, 32, RULE_commandParameters);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				commandSlashOptions();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				commandMacroOptions();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				commandEmptyOptions();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				commandMaxLength();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandParametersContext[] commandParameters() {
			return GetRuleContexts<CommandParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandParametersContext commandParameters(int i) {
			return GetRuleContext<CommandParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParser.Comma, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 34, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(T__23);
			{
			State = 191;
			commandParameters();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 192;
				Match(Comma);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) {
					{
					{
					State = 193;
					commandParameters();
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
			State = 201;
			Match(T__5);
			State = 202;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeprecatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionString() { return GetToken(mcdocParser.VersionString, 0); }
		public DeprecatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deprecated; } }
	}

	[RuleVersion(0)]
	public DeprecatedContext deprecated() {
		DeprecatedContext _localctx = new DeprecatedContext(Context, State);
		EnterRule(_localctx, 36, RULE_deprecated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__24);
			State = 205;
			Match(VersionString);
			State = 206;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dispatcher_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DispatcherKeyString() { return GetToken(mcdocParser.DispatcherKeyString, 0); }
		public Dispatcher_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatcher_key; } }
	}

	[RuleVersion(0)]
	public Dispatcher_keyContext dispatcher_key() {
		Dispatcher_keyContext _localctx = new Dispatcher_keyContext(Context, State);
		EnterRule(_localctx, 38, RULE_dispatcher_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__25);
			State = 209;
			Match(DispatcherKeyString);
			State = 210;
			Match(T__8);
			State = 211;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Divisible_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(mcdocParser.Integer, 0); }
		public Divisible_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divisible_by; } }
	}

	[RuleVersion(0)]
	public Divisible_byContext divisible_by() {
		Divisible_byContext _localctx = new Divisible_byContext(Context, State);
		EnterRule(_localctx, 40, RULE_divisible_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(T__26);
			State = 214;
			Match(Integer);
			State = 215;
			Match(T__8);
			State = 216;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityAmountContext : ParserRuleContext {
		public EntityAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityAmount; } }
	}

	[RuleVersion(0)]
	public EntityAmountContext entityAmount() {
		EntityAmountContext _localctx = new EntityAmountContext(Context, State);
		EnterRule(_localctx, 42, RULE_entityAmount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__27);
			State = 219;
			_la = TokenStream.LA(1);
			if ( !(_la==T__28 || _la==T__29) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityTypeContext : ParserRuleContext {
		public EntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityType; } }
	}

	[RuleVersion(0)]
	public EntityTypeContext entityType() {
		EntityTypeContext _localctx = new EntityTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_entityType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(T__30);
			State = 222;
			_la = TokenStream.LA(1);
			if ( !(_la==T__31 || _la==T__32) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityAmountContext entityAmount() {
			return GetRuleContext<EntityAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityTypeContext entityType() {
			return GetRuleContext<EntityTypeContext>(0);
		}
		public EntityParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityParameters; } }
	}

	[RuleVersion(0)]
	public EntityParametersContext entityParameters() {
		EntityParametersContext _localctx = new EntityParametersContext(Context, State);
		EnterRule(_localctx, 46, RULE_entityParameters);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				entityAmount();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				entityType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityParametersContext[] entityParameters() {
			return GetRuleContexts<EntityParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityParametersContext entityParameters(int i) {
			return GetRuleContext<EntityParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParser.Comma, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 48, RULE_entity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__33);
			{
			State = 229;
			entityParameters();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 230;
				Match(Comma);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__27 || _la==T__30) {
					{
					{
					State = 231;
					entityParameters();
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
			State = 239;
			Match(T__5);
			State = 240;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameRuleParameterContext : ParserRuleContext {
		public GameRuleParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameRuleParameter; } }
	}

	[RuleVersion(0)]
	public GameRuleParameterContext gameRuleParameter() {
		GameRuleParameterContext _localctx = new GameRuleParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_gameRuleParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(T__30);
			State = 243;
			_la = TokenStream.LA(1);
			if ( !(_la==T__34 || _la==T__35) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Game_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameRuleParameterContext gameRuleParameter() {
			return GetRuleContext<GameRuleParameterContext>(0);
		}
		public Game_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game_rule; } }
	}

	[RuleVersion(0)]
	public Game_ruleContext game_rule() {
		Game_ruleContext _localctx = new Game_ruleContext(Context, State);
		EnterRule(_localctx, 52, RULE_game_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__36);
			State = 246;
			gameRuleParameter();
			State = 247;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdRegistryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringValue() { return GetToken(mcdocParser.StringValue, 0); }
		public IdRegistryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idRegistry; } }
	}

	[RuleVersion(0)]
	public IdRegistryContext idRegistry() {
		IdRegistryContext _localctx = new IdRegistryContext(Context, State);
		EnterRule(_localctx, 54, RULE_idRegistry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__38);
			State = 250;
			Match(StringValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdTagsContext : ParserRuleContext {
		public IdTagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idTags; } }
	}

	[RuleVersion(0)]
	public IdTagsContext idTags() {
		IdTagsContext _localctx = new IdTagsContext(Context, State);
		EnterRule(_localctx, 56, RULE_idTags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(T__39);
			State = 253;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdRegistryContext idRegistry() {
			return GetRuleContext<IdRegistryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTagsContext idTags() {
			return GetRuleContext<IdTagsContext>(0);
		}
		public IdParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idParameters; } }
	}

	[RuleVersion(0)]
	public IdParametersContext idParameters() {
		IdParametersContext _localctx = new IdParametersContext(Context, State);
		EnterRule(_localctx, 58, RULE_idParameters);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				idRegistry();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				idTags();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdParametersContext[] idParameters() {
			return GetRuleContexts<IdParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdParametersContext idParameters(int i) {
			return GetRuleContext<IdParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParser.Comma, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 60, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(T__43);
			{
			State = 260;
			idParameters();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 261;
				Match(Comma);
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__38 || _la==T__39) {
					{
					{
					State = 262;
					idParameters();
					}
					}
					State = 267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
			State = 270;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_regexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(mcdocParser.Any, 0); }
		public Match_regexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_regex; } }
	}

	[RuleVersion(0)]
	public Match_regexContext match_regex() {
		Match_regexContext _localctx = new Match_regexContext(Context, State);
		EnterRule(_localctx, 62, RULE_match_regex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(T__45);
			State = 273;
			Match(Any);
			State = 274;
			Match(T__46);
			State = 275;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NbtContext : ParserRuleContext {
		public NbtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbt; } }
	}

	[RuleVersion(0)]
	public NbtContext nbt() {
		NbtContext _localctx = new NbtContext(Context, State);
		EnterRule(_localctx, 64, RULE_nbt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__47);
			State = 278;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nbt_pathContext : ParserRuleContext {
		public Nbt_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbt_path; } }
	}

	[RuleVersion(0)]
	public Nbt_pathContext nbt_path() {
		Nbt_pathContext _localctx = new Nbt_pathContext(Context, State);
		EnterRule(_localctx, 66, RULE_nbt_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(T__48);
			State = 281;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectiveContext : ParserRuleContext {
		public ObjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objective; } }
	}

	[RuleVersion(0)]
	public ObjectiveContext objective() {
		ObjectiveContext _localctx = new ObjectiveContext(Context, State);
		EnterRule(_localctx, 68, RULE_objective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__49);
			State = 284;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regex_patternContext : ParserRuleContext {
		public Regex_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex_pattern; } }
	}

	[RuleVersion(0)]
	public Regex_patternContext regex_pattern() {
		Regex_patternContext _localctx = new Regex_patternContext(Context, State);
		EnterRule(_localctx, 70, RULE_regex_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(T__50);
			State = 287;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Score_holderContext : ParserRuleContext {
		public Score_holderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score_holder; } }
	}

	[RuleVersion(0)]
	public Score_holderContext score_holder() {
		Score_holderContext _localctx = new Score_holderContext(Context, State);
		EnterRule(_localctx, 72, RULE_score_holder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(T__51);
			State = 290;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionString() { return GetToken(mcdocParser.VersionString, 0); }
		public SinceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_since; } }
	}

	[RuleVersion(0)]
	public SinceContext since() {
		SinceContext _localctx = new SinceContext(Context, State);
		EnterRule(_localctx, 74, RULE_since);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(T__52);
			State = 293;
			Match(VersionString);
			State = 294;
			Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionString() { return GetToken(mcdocParser.VersionString, 0); }
		public UntilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until; } }
	}

	[RuleVersion(0)]
	public UntilContext until() {
		UntilContext _localctx = new UntilContext(Context, State);
		EnterRule(_localctx, 76, RULE_until);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__53);
			State = 297;
			Match(VersionString);
			State = 298;
			Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 78, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__54);
			State = 301;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamContext : ParserRuleContext {
		public TeamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team; } }
	}

	[RuleVersion(0)]
	public TeamContext team() {
		TeamContext _localctx = new TeamContext(Context, State);
		EnterRule(_localctx, 80, RULE_team);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__55);
			State = 304;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_componentContext : ParserRuleContext {
		public Text_componentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_component; } }
	}

	[RuleVersion(0)]
	public Text_componentContext text_component() {
		Text_componentContext _localctx = new Text_componentContext(Context, State);
		EnterRule(_localctx, 82, RULE_text_component);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(T__56);
			State = 307;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidContext : ParserRuleContext {
		public UuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuid; } }
	}

	[RuleVersion(0)]
	public UuidContext uuid() {
		UuidContext _localctx = new UuidContext(Context, State);
		EnterRule(_localctx, 84, RULE_uuid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsefilePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocFilePath() { return GetToken(mcdocParser.DocFilePath, 0); }
		public UsefilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usefilePath; } }
	}

	[RuleVersion(0)]
	public UsefilePathContext usefilePath() {
		UsefilePathContext _localctx = new UsefilePathContext(Context, State);
		EnterRule(_localctx, 86, RULE_usefilePath);
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__58:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 311;
				Match(T__58);
				State = 312;
				Match(DocFilePath);
				}
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 313;
				Match(T__59);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsefilePathContext[] usefilePath() {
			return GetRuleContexts<UsefilePathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsefilePathContext usefilePath(int i) {
			return GetRuleContext<UsefilePathContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BlankString() { return GetToken(mcdocParser.BlankString, 0); }
		public UseSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useSentence; } }
	}

	[RuleVersion(0)]
	public UseSentenceContext useSentence() {
		UseSentenceContext _localctx = new UseSentenceContext(Context, State);
		EnterRule(_localctx, 88, RULE_useSentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BlankString) {
				{
				State = 316;
				Match(BlankString);
				}
			}

			State = 319;
			Match(T__60);
			State = 320;
			usefilePath();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 321;
					usefilePath();
					}
					}
					State = 324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__58 || _la==T__59 );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext fieldValue() {
			return GetRuleContext<FieldValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CanonicalContext canonical() {
			return GetRuleContext<CanonicalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeprecatedContext deprecated() {
			return GetRuleContext<DeprecatedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dispatcher_keyContext dispatcher_key() {
			return GetRuleContext<Dispatcher_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Divisible_byContext divisible_by() {
			return GetRuleContext<Divisible_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NbtContext nbt() {
			return GetRuleContext<NbtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nbt_pathContext nbt_path() {
			return GetRuleContext<Nbt_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectiveContext objective() {
			return GetRuleContext<ObjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Regex_patternContext regex_pattern() {
			return GetRuleContext<Regex_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Score_holderContext score_holder() {
			return GetRuleContext<Score_holderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SinceContext since() {
			return GetRuleContext<SinceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_componentContext text_component() {
			return GetRuleContext<Text_componentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilContext until() {
			return GetRuleContext<UntilContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidContext uuid() {
			return GetRuleContext<UuidContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 90, RULE_attributes);
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FieldValue:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				fieldValue();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				canonical();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330;
				color();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 4);
				{
				State = 331;
				command();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 5);
				{
				State = 332;
				deprecated();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 6);
				{
				State = 333;
				dispatcher_key();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 7);
				{
				State = 334;
				divisible_by();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 8);
				{
				State = 335;
				entity();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 9);
				{
				State = 336;
				id();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 10);
				{
				State = 337;
				nbt();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 11);
				{
				State = 338;
				nbt_path();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 12);
				{
				State = 339;
				objective();
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 13);
				{
				State = 340;
				regex_pattern();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 14);
				{
				State = 341;
				score_holder();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 15);
				{
				State = 342;
				since();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 16);
				{
				State = 343;
				tag();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 17);
				{
				State = 344;
				team();
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 18);
				{
				State = 345;
				text_component();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 19);
				{
				State = 346;
				until();
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 20);
				{
				State = 347;
				uuid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatchSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DispatcherValue() { return GetToken(mcdocParser.DispatcherValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public DispatchSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatchSentence; } }
	}

	[RuleVersion(0)]
	public DispatchSentenceContext dispatchSentence() {
		DispatchSentenceContext _localctx = new DispatchSentenceContext(Context, State);
		EnterRule(_localctx, 92, RULE_dispatchSentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(T__61);
			State = 351;
			Match(DispatcherValue);
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				{
				{
				State = 352;
				Match(T__62);
				State = 353;
				Match(FieldValue);
				}
				}
				break;
			case Eof:
				{
				{
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext fieldValue() {
			return GetRuleContext<FieldValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ColonMark() { return GetToken(mcdocParser.ColonMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(mcdocParser.QuestionMark, 0); }
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 94, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			fieldValue();
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 358;
				Match(QuestionMark);
				}
			}

			State = 361;
			Match(ColonMark);
			State = 362;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public StructReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structReference; } }
	}

	[RuleVersion(0)]
	public StructReferenceContext structReference() {
		StructReferenceContext _localctx = new StructReferenceContext(Context, State);
		EnterRule(_localctx, 96, RULE_structReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(T__63);
			State = 365;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 98, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOpenBracketContext : ParserRuleContext {
		public StructOpenBracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOpenBracket; } }
	}

	[RuleVersion(0)]
	public StructOpenBracketContext structOpenBracket() {
		StructOpenBracketContext _localctx = new StructOpenBracketContext(Context, State);
		EnterRule(_localctx, 100, RULE_structOpenBracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(T__64);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructCloseBracketContext : ParserRuleContext {
		public StructCloseBracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structCloseBracket; } }
	}

	[RuleVersion(0)]
	public StructCloseBracketContext structCloseBracket() {
		StructCloseBracketContext _localctx = new StructCloseBracketContext(Context, State);
		EnterRule(_localctx, 102, RULE_structCloseBracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(T__65);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperInvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FieldValue() { return GetToken(mcdocParser.FieldValue, 0); }
		public SuperInvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superInvoke; } }
	}

	[RuleVersion(0)]
	public SuperInvokeContext superInvoke() {
		SuperInvokeContext _localctx = new SuperInvokeContext(Context, State);
		EnterRule(_localctx, 104, RULE_superInvoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(T__66);
			State = 374;
			Match(FieldValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext[] summary() {
			return GetRuleContexts<SummaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary(int i) {
			return GetRuleContext<SummaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructReferenceContext[] structReference() {
			return GetRuleContexts<StructReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructReferenceContext structReference(int i) {
			return GetRuleContext<StructReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperInvokeContext[] superInvoke() {
			return GetRuleContexts<SuperInvokeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperInvokeContext superInvoke(int i) {
			return GetRuleContext<SuperInvokeContext>(i);
		}
		public StructContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structContent; } }
	}

	[RuleVersion(0)]
	public StructContentContext structContent() {
		StructContentContext _localctx = new StructContentContext(Context, State);
		EnterRule(_localctx, 106, RULE_structContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 376;
					summary();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				{
				State = 382;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 381;
						superInvoke();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 384;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__63:
				{
				State = 387;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 386;
						structReference();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 389;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 394;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 393;
					structReference();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 399;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 398;
					summary();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 403;
				attributes();
				}
				break;
			}
			State = 406;
			fields();
			State = 413;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 408;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						State = 407;
						attributes();
						}
						break;
					}
					State = 410;
					fields();
					}
					} 
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructOpenBracketContext structOpenBracket() {
			return GetRuleContext<StructOpenBracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContentContext structContent() {
			return GetRuleContext<StructContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructCloseBracketContext structCloseBracket() {
			return GetRuleContext<StructCloseBracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BlankString() { return GetTokens(mcdocParser.BlankString); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BlankString(int i) {
			return GetToken(mcdocParser.BlankString, i);
		}
		public StructSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSentence; } }
	}

	[RuleVersion(0)]
	public StructSentenceContext structSentence() {
		StructSentenceContext _localctx = new StructSentenceContext(Context, State);
		EnterRule(_localctx, 108, RULE_structSentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BlankString) {
				{
				State = 416;
				Match(BlankString);
				}
			}

			State = 419;
			Match(T__67);
			State = 420;
			structName();
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BlankString) {
				{
				State = 421;
				Match(BlankString);
				}
			}

			State = 424;
			structOpenBracket();
			State = 425;
			structContent();
			State = 426;
			structCloseBracket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,82,429,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,1,1,1,
		1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,3,4,125,8,4,1,4,1,4,1,4,3,4,130,8,
		4,1,4,1,4,4,4,134,8,4,11,4,12,4,135,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,8,1,8,3,8,153,8,8,1,8,1,8,3,8,157,8,8,1,9,1,9,1,9,
		1,9,3,9,163,8,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,
		189,8,16,1,17,1,17,1,17,1,17,5,17,195,8,17,10,17,12,17,198,9,17,3,17,200,
		8,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,3,23,227,8,
		23,1,24,1,24,1,24,1,24,5,24,233,8,24,10,24,12,24,236,9,24,3,24,238,8,24,
		1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,3,29,258,8,29,1,30,1,30,1,30,1,30,5,30,264,8,30,10,
		30,12,30,267,9,30,3,30,269,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,
		1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,
		1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,
		1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,3,43,315,8,43,1,44,3,44,318,8,
		44,1,44,1,44,1,44,4,44,323,8,44,11,44,12,44,324,3,44,327,8,44,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,1,45,1,45,3,45,349,8,45,1,46,1,46,1,46,1,46,1,46,3,46,356,8,
		46,1,47,1,47,3,47,360,8,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,50,
		1,50,1,51,1,51,1,52,1,52,1,52,1,53,4,53,378,8,53,11,53,12,53,379,1,53,
		4,53,383,8,53,11,53,12,53,384,1,53,4,53,388,8,53,11,53,12,53,389,3,53,
		392,8,53,1,53,4,53,395,8,53,11,53,12,53,396,1,53,4,53,400,8,53,11,53,12,
		53,401,1,53,3,53,405,8,53,1,53,1,53,3,53,409,8,53,1,53,5,53,412,8,53,10,
		53,12,53,415,9,53,1,54,3,54,418,8,54,1,54,1,54,1,54,3,54,423,8,54,1,54,
		1,54,1,54,1,54,1,54,6,379,384,389,396,401,413,0,55,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,0,5,1,0,11,16,1,0,29,30,1,0,32,33,1,0,35,36,1,0,41,43,428,0,110,1,
		0,0,0,2,113,1,0,0,0,4,116,1,0,0,0,6,119,1,0,0,0,8,121,1,0,0,0,10,139,1,
		0,0,0,12,141,1,0,0,0,14,143,1,0,0,0,16,150,1,0,0,0,18,162,1,0,0,0,20,164,
		1,0,0,0,22,167,1,0,0,0,24,172,1,0,0,0,26,175,1,0,0,0,28,178,1,0,0,0,30,
		181,1,0,0,0,32,188,1,0,0,0,34,190,1,0,0,0,36,204,1,0,0,0,38,208,1,0,0,
		0,40,213,1,0,0,0,42,218,1,0,0,0,44,221,1,0,0,0,46,226,1,0,0,0,48,228,1,
		0,0,0,50,242,1,0,0,0,52,245,1,0,0,0,54,249,1,0,0,0,56,252,1,0,0,0,58,257,
		1,0,0,0,60,259,1,0,0,0,62,272,1,0,0,0,64,277,1,0,0,0,66,280,1,0,0,0,68,
		283,1,0,0,0,70,286,1,0,0,0,72,289,1,0,0,0,74,292,1,0,0,0,76,296,1,0,0,
		0,78,300,1,0,0,0,80,303,1,0,0,0,82,306,1,0,0,0,84,309,1,0,0,0,86,314,1,
		0,0,0,88,317,1,0,0,0,90,348,1,0,0,0,92,350,1,0,0,0,94,357,1,0,0,0,96,364,
		1,0,0,0,98,367,1,0,0,0,100,369,1,0,0,0,102,371,1,0,0,0,104,373,1,0,0,0,
		106,377,1,0,0,0,108,417,1,0,0,0,110,111,5,1,0,0,111,112,5,75,0,0,112,1,
		1,0,0,0,113,114,5,2,0,0,114,115,5,80,0,0,115,3,1,0,0,0,116,117,5,3,0,0,
		117,118,5,69,0,0,118,5,1,0,0,0,119,120,5,72,0,0,120,7,1,0,0,0,121,124,
		5,4,0,0,122,125,3,18,9,0,123,125,3,90,45,0,124,122,1,0,0,0,124,123,1,0,
		0,0,125,126,1,0,0,0,126,133,5,5,0,0,127,130,3,18,9,0,128,130,3,90,45,0,
		129,127,1,0,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,132,5,5,0,0,132,134,
		1,0,0,0,133,129,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,
		0,136,137,1,0,0,0,137,138,5,6,0,0,138,9,1,0,0,0,139,140,5,72,0,0,140,11,
		1,0,0,0,141,142,5,72,0,0,142,13,1,0,0,0,143,144,5,7,0,0,144,145,3,10,5,
		0,145,146,5,8,0,0,146,147,3,12,6,0,147,148,5,9,0,0,148,149,5,10,0,0,149,
		15,1,0,0,0,150,152,7,0,0,0,151,153,3,2,1,0,152,151,1,0,0,0,152,153,1,0,
		0,0,153,154,1,0,0,0,154,156,5,17,0,0,155,157,3,0,0,0,156,155,1,0,0,0,156,
		157,1,0,0,0,157,17,1,0,0,0,158,163,3,16,8,0,159,163,3,8,4,0,160,163,3,
		14,7,0,161,163,5,10,0,0,162,158,1,0,0,0,162,159,1,0,0,0,162,160,1,0,0,
		0,162,161,1,0,0,0,163,19,1,0,0,0,164,165,5,18,0,0,165,166,3,18,9,0,166,
		21,1,0,0,0,167,168,5,19,0,0,168,169,5,70,0,0,169,170,5,9,0,0,170,171,3,
		18,9,0,171,23,1,0,0,0,172,173,5,20,0,0,173,174,5,70,0,0,174,25,1,0,0,0,
		175,176,5,21,0,0,176,177,5,70,0,0,177,27,1,0,0,0,178,179,5,22,0,0,179,
		180,5,70,0,0,180,29,1,0,0,0,181,182,5,23,0,0,182,183,5,75,0,0,183,31,1,
		0,0,0,184,189,3,24,12,0,185,189,3,26,13,0,186,189,3,28,14,0,187,189,3,
		30,15,0,188,184,1,0,0,0,188,185,1,0,0,0,188,186,1,0,0,0,188,187,1,0,0,
		0,189,33,1,0,0,0,190,191,5,24,0,0,191,199,3,32,16,0,192,196,5,81,0,0,193,
		195,3,32,16,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,
		1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,199,192,1,0,0,0,199,200,1,0,0,
		0,200,201,1,0,0,0,201,202,5,6,0,0,202,203,5,10,0,0,203,35,1,0,0,0,204,
		205,5,25,0,0,205,206,5,76,0,0,206,207,5,9,0,0,207,37,1,0,0,0,208,209,5,
		26,0,0,209,210,5,77,0,0,210,211,5,9,0,0,211,212,5,10,0,0,212,39,1,0,0,
		0,213,214,5,27,0,0,214,215,5,75,0,0,215,216,5,9,0,0,216,217,5,13,0,0,217,
		41,1,0,0,0,218,219,5,28,0,0,219,220,7,1,0,0,220,43,1,0,0,0,221,222,5,31,
		0,0,222,223,7,2,0,0,223,45,1,0,0,0,224,227,3,42,21,0,225,227,3,44,22,0,
		226,224,1,0,0,0,226,225,1,0,0,0,227,47,1,0,0,0,228,229,5,34,0,0,229,237,
		3,46,23,0,230,234,5,81,0,0,231,233,3,46,23,0,232,231,1,0,0,0,233,236,1,
		0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,
		237,230,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,5,6,0,0,240,241,
		5,10,0,0,241,49,1,0,0,0,242,243,5,31,0,0,243,244,7,3,0,0,244,51,1,0,0,
		0,245,246,5,37,0,0,246,247,3,50,25,0,247,248,5,38,0,0,248,53,1,0,0,0,249,
		250,5,39,0,0,250,251,5,70,0,0,251,55,1,0,0,0,252,253,5,40,0,0,253,254,
		7,4,0,0,254,57,1,0,0,0,255,258,3,54,27,0,256,258,3,56,28,0,257,255,1,0,
		0,0,257,256,1,0,0,0,258,59,1,0,0,0,259,260,5,44,0,0,260,268,3,58,29,0,
		261,265,5,81,0,0,262,264,3,58,29,0,263,262,1,0,0,0,264,267,1,0,0,0,265,
		263,1,0,0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,268,261,1,
		0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,45,0,0,271,61,1,0,0,0,
		272,273,5,46,0,0,273,274,5,69,0,0,274,275,5,47,0,0,275,276,5,10,0,0,276,
		63,1,0,0,0,277,278,5,48,0,0,278,279,5,10,0,0,279,65,1,0,0,0,280,281,5,
		49,0,0,281,282,5,10,0,0,282,67,1,0,0,0,283,284,5,50,0,0,284,285,5,10,0,
		0,285,69,1,0,0,0,286,287,5,51,0,0,287,288,5,10,0,0,288,71,1,0,0,0,289,
		290,5,52,0,0,290,291,5,10,0,0,291,73,1,0,0,0,292,293,5,53,0,0,293,294,
		5,76,0,0,294,295,5,47,0,0,295,75,1,0,0,0,296,297,5,54,0,0,297,298,5,76,
		0,0,298,299,5,47,0,0,299,77,1,0,0,0,300,301,5,55,0,0,301,302,5,10,0,0,
		302,79,1,0,0,0,303,304,5,56,0,0,304,305,5,10,0,0,305,81,1,0,0,0,306,307,
		5,57,0,0,307,308,5,10,0,0,308,83,1,0,0,0,309,310,5,58,0,0,310,85,1,0,0,
		0,311,312,5,59,0,0,312,315,5,71,0,0,313,315,5,60,0,0,314,311,1,0,0,0,314,
		313,1,0,0,0,315,87,1,0,0,0,316,318,5,82,0,0,317,316,1,0,0,0,317,318,1,
		0,0,0,318,319,1,0,0,0,319,320,5,61,0,0,320,326,3,86,43,0,321,323,3,86,
		43,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,
		327,1,0,0,0,326,322,1,0,0,0,326,327,1,0,0,0,327,89,1,0,0,0,328,349,3,6,
		3,0,329,349,3,20,10,0,330,349,3,22,11,0,331,349,3,34,17,0,332,349,3,36,
		18,0,333,349,3,38,19,0,334,349,3,40,20,0,335,349,3,48,24,0,336,349,3,60,
		30,0,337,349,3,64,32,0,338,349,3,66,33,0,339,349,3,68,34,0,340,349,3,70,
		35,0,341,349,3,72,36,0,342,349,3,74,37,0,343,349,3,78,39,0,344,349,3,80,
		40,0,345,349,3,82,41,0,346,349,3,76,38,0,347,349,3,84,42,0,348,328,1,0,
		0,0,348,329,1,0,0,0,348,330,1,0,0,0,348,331,1,0,0,0,348,332,1,0,0,0,348,
		333,1,0,0,0,348,334,1,0,0,0,348,335,1,0,0,0,348,336,1,0,0,0,348,337,1,
		0,0,0,348,338,1,0,0,0,348,339,1,0,0,0,348,340,1,0,0,0,348,341,1,0,0,0,
		348,342,1,0,0,0,348,343,1,0,0,0,348,344,1,0,0,0,348,345,1,0,0,0,348,346,
		1,0,0,0,348,347,1,0,0,0,349,91,1,0,0,0,350,351,5,62,0,0,351,355,5,78,0,
		0,352,353,5,63,0,0,353,356,5,72,0,0,354,356,1,0,0,0,355,352,1,0,0,0,355,
		354,1,0,0,0,356,93,1,0,0,0,357,359,3,6,3,0,358,360,5,73,0,0,359,358,1,
		0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,5,74,0,0,362,363,3,18,9,
		0,363,95,1,0,0,0,364,365,5,64,0,0,365,366,5,72,0,0,366,97,1,0,0,0,367,
		368,5,72,0,0,368,99,1,0,0,0,369,370,5,65,0,0,370,101,1,0,0,0,371,372,5,
		66,0,0,372,103,1,0,0,0,373,374,5,67,0,0,374,375,5,72,0,0,375,105,1,0,0,
		0,376,378,3,4,2,0,377,376,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,379,
		377,1,0,0,0,380,391,1,0,0,0,381,383,3,104,52,0,382,381,1,0,0,0,383,384,
		1,0,0,0,384,385,1,0,0,0,384,382,1,0,0,0,385,392,1,0,0,0,386,388,3,96,48,
		0,387,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,389,387,1,0,0,0,390,
		392,1,0,0,0,391,382,1,0,0,0,391,387,1,0,0,0,392,394,1,0,0,0,393,395,3,
		96,48,0,394,393,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,396,394,1,0,0,
		0,397,399,1,0,0,0,398,400,3,4,2,0,399,398,1,0,0,0,400,401,1,0,0,0,401,
		402,1,0,0,0,401,399,1,0,0,0,402,404,1,0,0,0,403,405,3,90,45,0,404,403,
		1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,413,3,94,47,0,407,409,3,90,
		45,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,3,94,47,0,
		411,408,1,0,0,0,412,415,1,0,0,0,413,414,1,0,0,0,413,411,1,0,0,0,414,107,
		1,0,0,0,415,413,1,0,0,0,416,418,5,82,0,0,417,416,1,0,0,0,417,418,1,0,0,
		0,418,419,1,0,0,0,419,420,5,68,0,0,420,422,3,98,49,0,421,423,5,82,0,0,
		422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,3,100,50,0,425,
		426,3,106,53,0,426,427,3,102,51,0,427,109,1,0,0,0,33,124,129,135,152,156,
		162,188,196,199,226,234,237,257,265,268,314,317,324,326,348,355,359,379,
		384,389,391,396,401,404,408,413,417,422
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
